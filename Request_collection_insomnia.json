{"_type":"export","__export_format":4,"__export_date":"2023-03-25T21:19:01.303Z","__export_source":"insomnia.desktop.app:v2023.1.0","resources":[{"_id":"req_122a43d06580474c8f711b58c70e2bb6","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679244881683,"created":1679244874921,"url":"{{ _.baseUrl }}/","name":"/","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1679233931420,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"wrk_739d639057a04d29ac42d1f810a5208d","parentId":null,"modified":1679233848802,"created":1679233848802,"name":"X4_Rest_Reloaded","description":"","scope":"collection","_type":"workspace"},{"_id":"req_b4f7eadf9b3a4828a97cb81aa7524c23","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679431382188,"created":1679234010176,"url":"{{ _.baseUrl }}/stop","name":"/stop","description":"","method":"POST","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1679233921575.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_239d141bcda5463094ec433d9738b3ba","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679354029294,"created":1679315591236,"url":"{{ _.baseUrl }}/DumpLua","name":"/DumpLua","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1679233911731,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_c1b48407af3540dbb31a18d72a008155","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679610874741,"created":1679517718187,"url":"{{ _.baseUrl }}/ExecuteLuaScript","name":"/ExecuteLuaScript","description":"","method":"POST","body":{"mimeType":"text/plain","text":"--\n-- json.lua\n--\n-- Copyright (c) 2020 rxi\n--\n-- Permission is hereby granted, free of charge, to any person obtaining a copy of\n-- this software and associated documentation files (the \"Software\"), to deal in\n-- the Software without restriction, including without limitation the rights to\n-- use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n-- of the Software, and to permit persons to whom the Software is furnished to do\n-- so, subject to the following conditions:\n--\n-- The above copyright notice and this permission notice shall be included in all\n-- copies or substantial portions of the Software.\n--\n-- THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n-- SOFTWARE.\n--\n\nlocal json = { _version = \"0.1.2\" }\n\n-------------------------------------------------------------------------------\n-- Encode\n-------------------------------------------------------------------------------\n\nlocal encode\n\nlocal escape_char_map = {\n    [\"\\\\\"] = \"\\\\\",\n    [\"\\\"\"] = \"\\\"\",\n    [\"\\b\"] = \"b\",\n    [\"\\f\"] = \"f\",\n    [\"\\n\"] = \"n\",\n    [\"\\r\"] = \"r\",\n    [\"\\t\"] = \"t\",\n}\n\nlocal escape_char_map_inv = { [\"/\"] = \"/\" }\nfor k, v in pairs(escape_char_map) do\n    escape_char_map_inv[v] = k\nend\n\n\nlocal function escape_char(c)\n    return \"\\\\\" .. (escape_char_map[c] or string.format(\"u%04x\", c:byte()))\nend\n\n\nlocal function encode_nil(val)\n    return \"null\"\nend\n\n\nlocal function encode_table(val, stack)\n    local res = {}\n    stack = stack or {}\n\n    -- Circular reference?\n    if stack[val] then return '\"--circular reference\"' end\n\n    stack[val] = true\n\n    if rawget(val, 1) ~= nil or next(val) == nil then\n        -- Treat as array -- check keys are valid and it is not sparse\n        local n = 0\n        for k in pairs(val) do\n            if type(k) ~= \"number\" then\n                -- error(\"invalid table: mixed or invalid key types\")\n                return '\"invalid table: mixed or invalid key types\"'\n            end\n            n = n + 1\n        end\n        if n ~= #val then\n            -- error(\"invalid table: sparse array\")\n            return '\"invalid table: sparse array\"'\n        end\n        -- Encode\n        for i, v in ipairs(val) do\n            table.insert(res, encode(v, stack))\n        end\n        stack[val] = nil\n        return \"[\" .. table.concat(res, \",\") .. \"]\"\n    else\n        -- Treat as an object\n        for k, v in pairs(val) do\n            if type(k) ~= \"string\" then\n                -- error(\"invalid table: mixed or invalid key types\")\n                goto continue\n            end\n            table.insert(res, encode(k, stack) .. \":\" .. encode(v, stack))\n            ::continue::\n        end\n        stack[val] = nil\n        return \"{\" .. table.concat(res, \",\") .. \"}\"\n    end\nend\n\n\nlocal function encode_string(val)\n    return '\"' .. val:gsub('[%z\\1-\\31\\\\\"]', escape_char) .. '\"'\nend\n\n\nlocal function encode_number(val)\n    -- Check for NaN, -inf and inf\n    if val ~= val or val <= -math.huge or val >= math.huge then\n        return '\"' .. tostring(val) .. '\"'\n    end\n    return string.format(\"%.14g\", val)\nend\n\nlocal function encode_userdata(val)\n    -- return tostring(val)\n    return encode_number(ConvertIDTo64Bit(val))\nend\n\nlocal function encode_unsupported(val)\n    return '\"unsupported:' .. type(val) .. '\"'\nend\n\nlocal type_func_map = {\n    [\"nil\"] = encode_nil,\n    [\"table\"] = encode_table,\n    [\"string\"] = encode_string,\n    [\"number\"] = encode_number,\n    [\"boolean\"] = tostring,\n    [\"userdata\"] = encode_userdata,\n    [\"function\"] = encode_unsupported\n}\n\n\nencode = function(val, stack)\n    local t = type(val)\n    local f = type_func_map[t]\n    if f then\n        return f(val, stack)\n    end\n    error(\"unexpected type '\" .. t .. \"'\")\nend\n\n\nfunction json.encode(val)\n    return (encode(val))\nend\n\n-------------------------------------------------------------------------------\n-- Decode\n-------------------------------------------------------------------------------\n\nlocal parse\n\nlocal function create_set(...)\n    local res = {}\n    for i = 1, select(\"#\", ...) do\n        res[select(i, ...)] = true\n    end\n    return res\nend\n\nlocal space_chars  = create_set(\" \", \"\\t\", \"\\r\", \"\\n\")\nlocal delim_chars  = create_set(\" \", \"\\t\", \"\\r\", \"\\n\", \"]\", \"}\", \",\")\nlocal escape_chars = create_set(\"\\\\\", \"/\", '\"', \"b\", \"f\", \"n\", \"r\", \"t\", \"u\")\nlocal literals     = create_set(\"true\", \"false\", \"null\")\n\nlocal literal_map  = {\n    [\"true\"] = true,\n    [\"false\"] = false,\n    [\"null\"] = nil,\n}\n\n\nlocal function next_char(str, idx, set, negate)\n    for i = idx, #str do\n        if set[str:sub(i, i)] ~= negate then\n            return i\n        end\n    end\n    return #str + 1\nend\n\n\nlocal function decode_error(str, idx, msg)\n    local line_count = 1\n    local col_count = 1\n    for i = 1, idx - 1 do\n        col_count = col_count + 1\n        if str:sub(i, i) == \"\\n\" then\n            line_count = line_count + 1\n            col_count = 1\n        end\n    end\n    error(string.format(\"%s at line %d col %d\", msg, line_count, col_count))\nend\n\n\nlocal function codepoint_to_utf8(n)\n    -- http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=iws-appendixa\n    local f = math.floor\n    if n <= 0x7f then\n        return string.char(n)\n    elseif n <= 0x7ff then\n        return string.char(f(n / 64) + 192, n % 64 + 128)\n    elseif n <= 0xffff then\n        return string.char(f(n / 4096) + 224, f(n % 4096 / 64) + 128, n % 64 + 128)\n    elseif n <= 0x10ffff then\n        return string.char(f(n / 262144) + 240, f(n % 262144 / 4096) + 128,\n            f(n % 4096 / 64) + 128, n % 64 + 128)\n    end\n    error(string.format(\"invalid unicode codepoint '%x'\", n))\nend\n\n\nlocal function parse_unicode_escape(s)\n    local n1 = tonumber(s:sub(1, 4), 16)\n    local n2 = tonumber(s:sub(7, 10), 16)\n    -- Surrogate pair?\n    if n2 then\n        return codepoint_to_utf8((n1 - 0xd800) * 0x400 + (n2 - 0xdc00) + 0x10000)\n    else\n        return codepoint_to_utf8(n1)\n    end\nend\n\n\nlocal function parse_string(str, i)\n    local res = \"\"\n    local j = i + 1\n    local k = j\n\n    while j <= #str do\n        local x = str:byte(j)\n\n        if x < 32 then\n            decode_error(str, j, \"control character in string\")\n        elseif x == 92 then -- `\\`: Escape\n            res = res .. str:sub(k, j - 1)\n            j = j + 1\n            local c = str:sub(j, j)\n            if c == \"u\" then\n                local hex = str:match(\"^[dD][89aAbB]%x%x\\\\u%x%x%x%x\", j + 1)\n                    or str:match(\"^%x%x%x%x\", j + 1)\n                    or decode_error(str, j - 1, \"invalid unicode escape in string\")\n                res = res .. parse_unicode_escape(hex)\n                j = j + #hex\n            else\n                if not escape_chars[c] then\n                    decode_error(str, j - 1, \"invalid escape char '\" .. c .. \"' in string\")\n                end\n                res = res .. escape_char_map_inv[c]\n            end\n            k = j + 1\n        elseif x == 34 then -- `\"`: End of string\n            res = res .. str:sub(k, j - 1)\n            return res, j + 1\n        end\n\n        j = j + 1\n    end\n\n    decode_error(str, i, \"expected closing quote for string\")\nend\n\n\nlocal function parse_number(str, i)\n    local x = next_char(str, i, delim_chars)\n    local s = str:sub(i, x - 1)\n    local n = tonumber(s)\n    if not n then\n        decode_error(str, i, \"invalid number '\" .. s .. \"'\")\n    end\n    return n, x\nend\n\n\nlocal function parse_literal(str, i)\n    local x = next_char(str, i, delim_chars)\n    local word = str:sub(i, x - 1)\n    if not literals[word] then\n        decode_error(str, i, \"invalid literal '\" .. word .. \"'\")\n    end\n    return literal_map[word], x\nend\n\n\nlocal function parse_array(str, i)\n    local res = {}\n    local n = 1\n    i = i + 1\n    while 1 do\n        local x\n        i = next_char(str, i, space_chars, true)\n        -- Empty / end of array?\n        if str:sub(i, i) == \"]\" then\n            i = i + 1\n            break\n        end\n        -- Read token\n        x, i = parse(str, i)\n        res[n] = x\n        n = n + 1\n        -- Next token\n        i = next_char(str, i, space_chars, true)\n        local chr = str:sub(i, i)\n        i = i + 1\n        if chr == \"]\" then break end\n        if chr ~= \",\" then decode_error(str, i, \"expected ']' or ','\") end\n    end\n    return res, i\nend\n\n\nlocal function parse_object(str, i)\n    local res = {}\n    i = i + 1\n    while 1 do\n        local key, val\n        i = next_char(str, i, space_chars, true)\n        -- Empty / end of object?\n        if str:sub(i, i) == \"}\" then\n            i = i + 1\n            break\n        end\n        -- Read key\n        if str:sub(i, i) ~= '\"' then\n            decode_error(str, i, \"expected string for key\")\n        end\n        key, i = parse(str, i)\n        -- Read ':' delimiter\n        i = next_char(str, i, space_chars, true)\n        if str:sub(i, i) ~= \":\" then\n            decode_error(str, i, \"expected ':' after key\")\n        end\n        i = next_char(str, i + 1, space_chars, true)\n        -- Read value\n        val, i = parse(str, i)\n        -- Set\n        res[key] = val\n        -- Next token\n        i = next_char(str, i, space_chars, true)\n        local chr = str:sub(i, i)\n        i = i + 1\n        if chr == \"}\" then break end\n        if chr ~= \",\" then decode_error(str, i, \"expected '}' or ','\") end\n    end\n    return res, i\nend\n\n\nlocal char_func_map = {\n    ['\"'] = parse_string,\n    [\"0\"] = parse_number,\n    [\"1\"] = parse_number,\n    [\"2\"] = parse_number,\n    [\"3\"] = parse_number,\n    [\"4\"] = parse_number,\n    [\"5\"] = parse_number,\n    [\"6\"] = parse_number,\n    [\"7\"] = parse_number,\n    [\"8\"] = parse_number,\n    [\"9\"] = parse_number,\n    [\"-\"] = parse_number,\n    [\"t\"] = parse_literal,\n    [\"f\"] = parse_literal,\n    [\"n\"] = parse_literal,\n    [\"[\"] = parse_array,\n    [\"{\"] = parse_object,\n}\n\n\nparse = function(str, idx)\n    local chr = str:sub(idx, idx)\n    local f = char_func_map[chr]\n    if f then\n        return f(str, idx)\n    end\n    decode_error(str, idx, \"unexpected character '\" .. chr .. \"'\")\nend\n\n\nfunction json.decode(str)\n    if type(str) ~= \"string\" then\n        error(\"expected argument of type string, got \" .. type(str))\n    end\n    local res, idx = parse(str, next_char(str, 1, space_chars, true))\n    idx = next_char(str, idx, space_chars, true)\n    if idx <= #str then\n        decode_error(str, idx, \"trailing garbage\")\n    end\n    return res\nend\n\nlocal ffi = require(\"ffi\")\nlocal C = ffi.C\nffi.cdef[[\n\ttypedef uint64_t UniverseID;\n\n\n\tUniverseID AddHoloMap(const char* texturename, float x0, float x1, float y0, float y1, float aspectx, float aspecty);\n\tuint32_t GetNumMapRenderedComponents(UniverseID holomapid);\n]]\n\nlocal map = \"map with ID '0'\"\n-- local rendertargetTexture = GetRenderTargetTexture(map)\n\n-- ripped by setting breakpoints...\nlocal rendertargetTexture = \"ui\\\\widget\\\\presentations\\\\widget_fullscreen\\\\widget_fullscreen_recovered\\\\detail_monitor-rendertarget\"\n\nlocal holomap = C.AddHoloMap(rendertargetTexture, 0, 0, 0, 0, 0, 1)\nreturn C.GetNumMapRenderedComponents(holomap)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},"parameters":[],"headers":[{"name":"Content-Type","value":"text/plain"}],"authentication":{},"metaSortKey":-1679233906808.75,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_9d449c5fe10a43499cd92b895e86145e","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679429185141,"created":1679428358508,"url":"{{ _.baseUrl }}/Pause","name":"/Pause","description":"","method":"POST","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1679233901886.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_f00284b2427042baa416c47577b8edd0","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679429177935,"created":1679429169977,"url":"{{ _.baseUrl }}/Unpause","name":"/Unpause","description":"","method":"POST","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1679233896964.25,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_53cc97a3386849d4a0c115649b3e76eb","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679518537288,"created":1679517234139,"url":"{{ _.baseUrl }}/GetObjectIDCode","name":"/GetObjectIDCode","description":"","method":"GET","body":{},"parameters":[{"id":"pair_812005e41f2e42838aee7a9bdb172b60","name":"\"objectId\"","value":"227873","description":""}],"headers":[],"authentication":{},"metaSortKey":-1679233884658.625,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_03ee0f2a6b494939aea13fd4df3525ff","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679517348778,"created":1679517298509,"url":"{{ _.baseUrl }}/GetComponentClass","name":"/GetComponentClass","description":"","method":"GET","body":{},"parameters":[{"id":"pair_812005e41f2e42838aee7a9bdb172b60","name":"\"componentId\"","value":"227873","description":""}],"headers":[],"authentication":{},"metaSortKey":-1679233878505.8125,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_67d41ceda5b44bfca967483bc53f2a35","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679602099809,"created":1679517303579,"url":"{{ _.baseUrl }}/GetComponentName","name":"/GetComponentName","description":"","method":"GET","body":{},"parameters":[{"id":"pair_812005e41f2e42838aee7a9bdb172b60","name":"componentId","value":"230305","description":""}],"headers":[],"authentication":{},"metaSortKey":-1679233875429.4062,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_675bddf782ad44ff86f9d104e81b37a0","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679603240169,"created":1679601853421,"url":"{{ _.baseUrl }}/GetComponentData","name":"/GetComponentData","description":"","method":"GET","body":{},"parameters":[{"id":"pair_812005e41f2e42838aee7a9bdb172b60","name":"componentId","value":"230301","description":""},{"id":"pair_401629b559ce4d988770ba7ccabc1b0f","name":"attribs","value":"name,hullpercent,shieldpercent,sector,isdock,maxunboostedforwardspeed","description":""}],"headers":[],"authentication":{},"metaSortKey":-1679233873891.2031,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_fabdd7972ab64c249456d4af2f9e0c82","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679606877909,"created":1679605337010,"url":"{{ _.baseUrl }}/IsObjectKnown","name":"/IsObjectKnown","description":"","method":"GET","body":{},"parameters":[{"id":"pair_812005e41f2e42838aee7a9bdb172b60","name":"componentId","value":"229140","description":""}],"headers":[],"authentication":{},"metaSortKey":-1679233873506.6523,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_99791e1fd6f74397b2dbd3e5bc3d8cd9","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679606882312,"created":1679605014284,"url":"{{ _.baseUrl }}/GetObjectPositionInSector","name":"/GetObjectPositionInSector","description":"","method":"GET","body":{},"parameters":[{"id":"pair_812005e41f2e42838aee7a9bdb172b60","name":"objectId","value":"229140","description":""}],"headers":[],"authentication":{},"metaSortKey":-1679233873122.1016,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_6261b64e919b49198047bbfa7973faab","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679245208306,"created":1679245181569,"url":"{{ _.baseUrl }}/GetCurrentGameTime","name":"/GetCurrentGameTime","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1679233872353,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_b4cb5ce6e35949068e07f26600184ae9","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679604363568,"created":1679604361826,"url":"{{ _.baseUrl }}/GetCurrentUTCDataTime","name":"/GetCurrentUTCDataTime","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1679233862508.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_1d72af4746ef4364bcb697f951209716","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679234030181,"created":1679233852664,"url":"{{ _.baseUrl }}/GetPlayerComputerID","name":"/GetPlayerComputerID","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1679233852664,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_664a641dfbca4391b3267c3c9ea48bef","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679237624115,"created":1679237621857,"url":"{{ _.baseUrl }}/GetPlayerContainerID","name":"/GetPlayerContainerID","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1679029125086,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_671c28c3ec7b4263acc5289c60858b8b","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679237637985,"created":1679237636371,"url":"{{ _.baseUrl }}/GetPlayerControlledShipID","name":"/GetPlayerControlledShipID","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1678926761297,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_488887acb623410f9a3858ea267f0909","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679237656563,"created":1679237654328,"url":"{{ _.baseUrl }}/GetPlayerID","name":"/GetPlayerID","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1678875579402.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_2401d29a0e9747ad8cc0394d78ddd455","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679237668068,"created":1679237666534,"url":"{{ _.baseUrl }}/GetPlayerObjectID","name":"/GetPlayerObjectID","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1678849988455.25,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_f8c78efa30de424592bf578ed5c54935","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679237683052,"created":1679237681371,"url":"{{ _.baseUrl }}/GetPlayerOccupiedShipID","name":"/GetPlayerOccupiedShipID","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1678837192981.625,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_deb8862c015d43b0a2d9b27295f23495","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679244912559,"created":1679244909367,"url":"{{ _.baseUrl }}/GetPlayerName","name":"/GetPlayerName","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1678830795244.8125,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_31564419f4014c4c9ef9cbac2d7ea257","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679244983757,"created":1679244940366,"url":"{{ _.baseUrl }}/GetPlayerFactionName","name":"/GetPlayerFactionName","description":"","method":"GET","body":{},"parameters":[{"id":"pair_fd7a1c511ff84756b353b0d1ee3f3a21","name":"userawname","value":"true","description":"raw name? ¯\\_(ツ)_/¯"}],"headers":[],"authentication":{},"metaSortKey":-1678827596376.4062,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_7ec80964b2a145d2a6f3eefb18210d2e","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679245058878,"created":1679245054856,"url":"{{ _.baseUrl }}/GetPlayerZoneID","name":"/GetPlayerZoneID","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1678825996942.2031,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_3ed6ddfcbbed46cdb196f011976117ab","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679605038747,"created":1679605037411,"url":"{{ _.baseUrl }}/GetPlayerTargetOffset","name":"/GetPlayerTargetOffset","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1678825797012.9277,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_3a256649d720414aa6398509a5ff551a","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679605071579,"created":1679605041666,"url":"{{ _.baseUrl }}/GetCreditsDueFromPlayerBuilds","name":"/GetCreditsDueFromPlayerBuilds","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1678825697048.29,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_6d30460640834ecf80022a76646b493a","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679605084295,"created":1679605044511,"url":"{{ _.baseUrl }}/GetCreditsDueFromPlayerTrades","name":"/GetCreditsDueFromPlayerTrades","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1678825647065.9712,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_d1fa7b9d91e4498da170a5859cdf6c4f","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679605157335,"created":1679605156086,"url":"{{ _.baseUrl }}/GetSofttarget","name":"/GetSofttarget","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1678825622074.8118,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_a81c8a0eaf714625acfd55455f78596c","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679604674827,"created":1679602307360,"url":"{{ _.baseUrl }}/GetStats","name":"/GetStats","description":"","method":"GET","body":{},"parameters":[{"id":"pair_fbab238fa59d43af86a36eea72e34ac8","name":"hidden","value":"0","description":""}],"headers":[],"authentication":{},"metaSortKey":-1678825597083.6523,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_7a63db46ffb34c138e79854bc287d681","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679248465995,"created":1679245290002,"url":"{{ _.baseUrl }}/GetNumMessages","name":"/GetNumMessages","description":"","method":"GET","body":{},"parameters":[{"id":"pair_28b4dd403c184422bcb33f912a6998ec","name":"category","value":"all","description":"message_category"},{"id":"pair_2d0fd7cce094408c851e848eb8d254eb","name":"unread","value":"false","description":""}],"headers":[],"authentication":{},"metaSortKey":-1678825197225.1016,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_4f76d5e5d19040fd83705f45b453a3f3","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679251285707,"created":1679245312569,"url":"{{ _.baseUrl }}/GetMessages","name":"/GetMessages","description":"","method":"GET","body":{},"parameters":[{"id":"pair_28b4dd403c184422bcb33f912a6998ec","name":"category","value":"all","description":"message_category"},{"id":"pair_b8977ec025bf45af967bab15b8815316","name":"from","value":"0","description":"optional","disabled":false},{"id":"pair_107930fb186f4af99eabe2c0726e15b4","name":"count","value":"99999","description":"optional","disabled":false},{"id":"pair_4d24f4f26b4d4b698de53dffc591ad29","name":"","value":"","description":""}],"headers":[],"authentication":{},"metaSortKey":-1678824797366.5508,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_04fcc517dbf349fbbf97c1e29fc6d61e","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679430731125,"created":1679430501597,"url":"{{ _.baseUrl }}/GetNumLogbook","name":"/GetNumLogbook","description":"","method":"GET","body":{},"parameters":[{"id":"pair_28b4dd403c184422bcb33f912a6998ec","name":"category","value":"all","description":"message_category"},{"id":"pair_4d24f4f26b4d4b698de53dffc591ad29","name":"","value":"","description":""}],"headers":[],"authentication":{},"metaSortKey":-1678824597437.2754,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_01f458a8942b455d9458e5fdd83dd6fa","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679434610348,"created":1679430776424,"url":"{{ _.baseUrl }}/GetLogbook","name":"/GetLogbook","description":"","method":"GET","body":{},"parameters":[{"id":"pair_28b4dd403c184422bcb33f912a6998ec","name":"category","value":"all","description":"message_category"},{"id":"pair_b8977ec025bf45af967bab15b8815316","name":"page","value":"0","description":"optional","disabled":false}],"headers":[],"authentication":{},"metaSortKey":-1678824597387.2754,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_a4010fa39bad42aa95d0d90ec1969935","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679775712820,"created":1679775708521,"url":"{{ _.baseUrl }}/GetNumAllRaces","name":"/GetNumAllRaces","description":"","method":"GET","body":{},"parameters":[{"id":"pair_28b4dd403c184422bcb33f912a6998ec","name":"category","value":"all","description":"message_category"},{"id":"pair_b8977ec025bf45af967bab15b8815316","name":"page","value":"0","description":"optional","disabled":false}],"headers":[],"authentication":{},"metaSortKey":-1678824497447.6377,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_52f9376674294a3b922e46148b109531","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679775725119,"created":1679775721758,"url":"{{ _.baseUrl }}/GetAllRaces","name":"/GetAllRaces","description":"","method":"GET","body":{},"parameters":[{"id":"pair_28b4dd403c184422bcb33f912a6998ec","name":"category","value":"all","description":"message_category"},{"id":"pair_b8977ec025bf45af967bab15b8815316","name":"page","value":"0","description":"optional","disabled":false}],"headers":[],"authentication":{},"metaSortKey":-1678824447477.8188,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_c74d9937a6d84dde8acd1258d56072e5","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679775815676,"created":1679775809177,"url":"{{ _.baseUrl }}/GetNumAllFactions","name":"/GetNumAllFactions","description":"","method":"GET","body":{},"parameters":[{"id":"pair_28b4dd403c184422bcb33f912a6998ec","name":"category","value":"all","description":"message_category"},{"id":"pair_b8977ec025bf45af967bab15b8815316","name":"page","value":"0","description":"optional","disabled":false}],"headers":[],"authentication":{},"metaSortKey":-1678824447427.8188,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_eed69c48ed234475b57c96479e26eea5","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679779024042,"created":1679775822923,"url":"{{ _.baseUrl }}/GetAllFactions","name":"/GetAllFactions","description":"","method":"GET","body":{},"parameters":[{"id":"pair_28b4dd403c184422bcb33f912a6998ec","name":"hidden","value":"0","description":"message_category"}],"headers":[],"authentication":{},"metaSortKey":-1678824422467.9094,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_24cb6b1db8164202986fc76c5720c8bb","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679778805682,"created":1679778640570,"url":"{{ _.baseUrl }}/GetAllFactionShips","name":"/GetAllFactionShips","description":"","method":"GET","body":{},"parameters":[{"id":"pair_b8977ec025bf45af967bab15b8815316","name":"factionId","value":"argon","description":"optional","disabled":false}],"headers":[],"authentication":{},"metaSortKey":-1678824409987.9546,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_c80b705abf5746e2ab27084fef009ad6","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679778920010,"created":1679778651610,"url":"{{ _.baseUrl }}/GetAllFactionStations","name":"/GetAllFactionStations","description":"","method":"GET","body":{},"parameters":[{"id":"pair_28b4dd403c184422bcb33f912a6998ec","name":"factionId","value":"argon","description":"message_category"}],"headers":[],"authentication":{},"metaSortKey":-1678824403747.9773,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"env_c44d21b1a25f134837046cd5e1701c590ca21056","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679233950588,"created":1679233848808,"name":"Base Environment","data":{"baseUrl":"http://localhost:3000"},"dataPropertyOrder":{"&":["baseUrl"]},"color":null,"isPrivate":false,"metaSortKey":1679233848808,"_type":"environment"},{"_id":"jar_c44d21b1a25f134837046cd5e1701c590ca21056","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679233848810,"created":1679233848810,"name":"Default Jar","cookies":[],"_type":"cookie_jar"},{"_id":"spc_46ff0ae453da46319cf8cc8d350099ab","parentId":"wrk_739d639057a04d29ac42d1f810a5208d","modified":1679233848803,"created":1679233848803,"fileName":"X4_Rest_Reloaded","contents":"","contentType":"yaml","_type":"api_spec"}]}