#pragma once
#include "ffi_typedef_struct.h"

namespace X4FFI
{
    using GetCrosshairArrowDetails = ArrowDetails (*)(int posid, float radius);
    using GetAutosaveIntervalOption = AutosaveIntervalInfo (*)();
    using GetBlacklistInfoCounts = BlacklistCounts (*)(BlacklistID id);
    using CreateBlacklist = BlacklistID (*)(BlacklistInfo info);
    using GetControllableBlacklistID = BlacklistID (*)(UniverseID controllableid, const char* listtype, const char* defaultgroup);
    using GetBoardingRiskThresholds = BoardingRiskThresholds (*)(UniverseID defensibletargetid, const char* boarderfactionid);
    using GetBuildTaskInfo = BuildTaskInfo (*)(BuildTaskID id);
    using GetComponentDetails = ComponentDetails (*)(const UniverseID componentid, const char*const connectionname);
    using GetCenteredMousePos = Coord2D (*)();
    using GetCompSlotScreenPos = Coord2D (*)(UIComponentSlot compslot);
    using GetWidgetSystemSizeOverride = Coord2D (*)();
    using GetBuildPlotCenterOffset = Coord3D (*)(UniverseID stationid);
    using GetBuildPlotSize = Coord3D (*)(UniverseID stationid);
    using GetMinimumBuildPlotCenterOffset = Coord3D (*)(UniverseID stationid);
    using GetMinimumBuildPlotSize = Coord3D (*)(UniverseID stationid);
    using GetPaidBuildPlotCenterOffset = Coord3D (*)(UniverseID stationid);
    using GetPaidBuildPlotSize = Coord3D (*)(UniverseID stationid);
    using GetNumBuildTaskCrewTransferInfo = CrewTransferInfoCounts (*)(UniverseID containerid, BuildTaskID id);
    using GetCurrentCrosshairMessage = CrosshairMessage (*)();
    using GetCurrentCursorInfo = CursorInfo (*)();
    using GetCustomGameStartBlueprintPropertyState = CustomGameStartBlueprintPropertyState (*)(const char* id, const char* propertyid);
    using GetCustomGameStartEncyclopediaPropertyState = CustomGameStartEncyclopediaPropertyState (*)(const char* id, const char* propertyid);
    using GetCustomGameStartInventoryPropertyState = CustomGameStartInventoryPropertyState (*)(const char* id, const char* propertyid);
    using GetCustomGameStartLoadoutPropertyState = CustomGameStartLoadoutPropertyState (*)(const char* id, const char* propertyid);
    using GetCustomGameStartRelationsPropertyState = CustomGameStartRelationsPropertyState (*)(const char* id, const char* propertyid);
    using GetCustomGameStartResearchPropertyState = CustomGameStartResearchPropertyState (*)(const char* id, const char* propertyid);
    using GetDroneDetails = DroneState (*)(const uint32_t dronetype);
    using GetEquipmentModInfo = EquipmentModInfo (*)(const char* wareid);
    using GetFPS = FPSDetails (*)();
    using GetFactionDetails = FactionDetails (*)(const char* factionid);
    using GetOwnerDetails = FactionDetails (*)(UniverseID componentid);
    using GetGameVersion = GameVersion (*)();
    using GetMissionOfferIcons = IconSet (*)(const UniverseID componentid);
    using GetLastAttackInfo = LastAttackerInfo (*)(UniverseID destructibleid);
    using GetMessageDetails2 = MessageDetails2 (*)(uint32_t messageid);
    using GetMissionBriefingIcon = MissionBriefingIconInfo (*)(MissionID missionid);
    using GetMissionIDDetails = MissionDetails (*)(uint64_t missionid);
    using GetMissionGroupDetails = MissionGroupDetails (*)(MissionID missionid);
    using GetPickedMapMission = MissionID (*)(UniverseID holomapid);
    using GetMissionInfo2 = MissionInfo2 (*)();
    using GetMissionIDObjective = MissionObjective (*)(uint64_t missionid);
    using GetMissionObjectiveStep2 = MissionObjectiveStep2 (*)(uint64_t missionid, size_t objectiveIndex);
    using GetPOIDetails = POIDetails (*)(const uint64_t poiid);
    using GetRelativeAimOffset = PosRot (*)(const UniverseID componentid);
    using GetTargetElementOffset = PosRot (*)(const int posid);
    using GetRelativeAimScreenPosition = Position2D (*)(const UniverseID componentid, const uint32_t iconsizeonscreen, const uint32_t iconsizeoffscreen);
    using GetFactionRelationStatus = RelationDetails (*)(const char* factionid);
    using GetRelationStatus2 = RelationDetails (*)(const UniverseID componentid, const char*const connectionname);
    using GetGameResolution = ResolutionInfo (*)();
    using GetRenderResolutionOption = ResolutionInfo (*)();
    using GetCameraRotation = Rotation (*)();
    using GetComponentScreenPosition = ScreenPos (*)(const UniverseID componentid, const uint32_t iconsizeonscreen, const uint32_t iconsizeoffscreen);
    using GetSofttarget = SofttargetDetails (*)();
    using GetSpecialNPCs = SpecialNPCSet (*)(const UniverseID componentid);
    using GetTableInitialSelectionInfo = TableSelectionInfo (*)(const int tableid);
    using GetPickedMapTradeOffer = TradeID (*)(UniverseID holomapid);
    using GetTurret = TurretDetails (*)(size_t turretnum);
    using SetFormationShape = UIFormationInfo (*)(UniverseID objectid, const char* formationshape);
    using GetFrameBackground2Info = UIFrameTextureInfo (*)(const int frameid);
    using GetFrameBackgroundInfo = UIFrameTextureInfo (*)(const int frameid);
    using GetFrameOverlayInfo = UIFrameTextureInfo (*)(const int frameid);
    using GetCurrentLoadoutStatistics2 = UILoadoutStatistics2 (*)(UniverseID shipid);
    using GetLoadoutStatistics2 = UILoadoutStatistics2 (*)(UniverseID shipid, const char* macroname, UILoadout uiloadout);
    using GetMaxLoadoutStatistics2 = UILoadoutStatistics2 (*)(UniverseID shipid, const char* macroname);
    using GetCurrentPlayerLogo = UILogo (*)();
    using GetMapTradeVolumeParameter = UIMapTradeVolumeParameter (*)();
    using GetHelpOverlayInfo = UIOverlayInfo (*)(const int widgetid);
    using GetStandardButtonHelpOverlayInfo = UIOverlayInfo (*)(const int frameid, const char* button);
    using GetCustomGameStartPosRotProperty = UIPosRot (*)(const char* id, const char* propertyid, CustomGameStartPosRotPropertyState* state);
    using GetObjectPositionInSector = UIPosRot (*)(UniverseID objectid);
    using GetPlayerTargetOffset = UIPosRot (*)();
    using GetLastSaveInfo = UISaveInfo (*)();
    using GetNumUISystemInfo = UISystemInfoCounts (*)(UniverseID clusterid);
    using GetCurrentVentureMissionInfo = UIVentureMissionInfo (*)(UniverseID ventureplatformid);
    using AddHoloMap = UniverseID (*)(const char* texturename, float x0, float x1, float y0, float y1, float aspectx, float aspecty);
    using CreateNPCFromPerson = UniverseID (*)(NPCSeed person, UniverseID controllableid);
    using GetCommonContext = UniverseID (*)(UniverseID componentid, UniverseID othercomponentid, bool includeself, bool includeother, UniverseID limitid, bool includelimit);
    using GetContextByClass = UniverseID (*)(UniverseID componentid, const char* classname, bool includeself);
    using GetContextForTransporterCheck = UniverseID (*)(UniverseID positionalid);
    using GetEnvironmentObject = UniverseID (*)();
    using GetExternalTargetViewComponent = UniverseID (*)();
    using GetFactionRepresentative = UniverseID (*)(const char* factionid);
    using GetInstantiatedPerson = UniverseID (*)(NPCSeed person, UniverseID controllableid);
    using GetLastPlayerControlledShipID = UniverseID (*)();
    using GetMapPositionOnEcliptic2 = UniverseID (*)(UniverseID holomapid, UIPosRot* position, bool adaptiveecliptic, UniverseID eclipticsectorid, UIPosRot eclipticoffset);
    using GetMissionIDObjectiveTarget = UniverseID (*)(uint64_t missionid, size_t targetIndex);
    using GetParentComponent = UniverseID (*)(UniverseID componentid);
    using GetPickedMapComponent = UniverseID (*)(UniverseID holomapid);
    using GetPickedMapMissionOffer = UniverseID (*)(UniverseID holomapid);
    using GetPickedMapOrder = UniverseID (*)(UniverseID holomapid, Order* result, bool* intermediate);
    using GetPlayerComputerID = UniverseID (*)();
    using GetPlayerContainerID = UniverseID (*)();
    using GetPlayerControlledShipID = UniverseID (*)();
    using GetPlayerID = UniverseID (*)();
    using GetPlayerObjectID = UniverseID (*)();
    using GetPlayerOccupiedShipID = UniverseID (*)();
    using GetPlayerShipID = UniverseID (*)();
    using GetPlayerZoneID = UniverseID (*)();
    using GetRoomForTransporter = UniverseID (*)(UIComponentSlot transporter);
    using GetSectorControlStation = UniverseID (*)(UniverseID sectorid);
    using GetSlotComponent = UniverseID (*)(UIComponentSlot slot);
    using GetTopLevelContainer = UniverseID (*)(UniverseID componentid);
    using GetTransporterLocationComponent = UniverseID (*)(UIComponentSlot transporter);
    using GetUpgradeSlotCurrentComponent = UniverseID (*)(UniverseID destructibleid, const char* upgradetypename, size_t slot);
    using GetZoneAt = UniverseID (*)(UniverseID sectorid, UIPosRot* uioffset);
    using ReserveBuildPlot = UniverseID (*)(UniverseID sectorid, const char* factionid, const char* set, UIPosRot location, float x, float y, float z);
    using GetUpgradeSlotGroup = UpgradeGroup (*)(UniverseID destructibleid, const char* macroname, const char* upgradetypename, size_t slot);
    using GetUpgradeGroupInfo = UpgradeGroupInfo (*)(UniverseID destructibleid, const char* macroname, const char* path, const char* group, const char* upgradetypename);
    using GetUpgradeGroupInfo2 = UpgradeGroupInfo (*)(UniverseID destructibleid, const char* macroname, UniverseID contextid, const char* path, const char* group, const char* upgradetypename);
    using GetPrimaryWeapon = WeaponDetails (*)(size_t weaponnum);
    using GetSecondaryWeapon = WeaponDetails (*)(size_t weaponnum);
    using GetWorkForceInfo = WorkForceInfo (*)(UniverseID containerid, const char* raceid);
    using AddAttackerToBoardingOperation = bool (*)(UniverseID defensibletargetid, UniverseID defensibleboarderid, const char* boarderfactionid, const char* actionid, uint32_t* marinetieramounts, int32_t* marinetierskilllevels, uint32_t nummarinetiers);
    using AdjustOrder = bool (*)(UniverseID controllableid, size_t idx, size_t newidx, bool enabled, bool forcestates, bool checkonly);
    using AreGfxSettingsTooHigh = bool (*)();
    using AreMandatoryAssertsEnabled = bool (*)();
    using AreOptionalAssertEnabled = bool (*)();
    using CanAcceptSubordinate = bool (*)(UniverseID commanderid, UniverseID potentialsubordinateid);
    using CanApplyKnownLoadout = bool (*)(const char* macroname, const char* loadoutid);
    using CanBuildLoadout = bool (*)(UniverseID containerid, UniverseID defensibleid, const char* macroname, const char* loadoutid);
    using CanCancelConstruction = bool (*)(UniverseID containerid, BuildTaskID id);
    using CanContainerEquipShip = bool (*)(UniverseID containerid, UniverseID shipid);
    using CanContainerMineTransport = bool (*)(UniverseID containerid, const char* transportname);
    using CanContainerSupplyShip = bool (*)(UniverseID containerid, UniverseID shipid);
    using CanContainerTransport = bool (*)(UniverseID containerid, const char* transportname);
    using CanControllableHaveControlEntity = bool (*)(UniverseID controllableid, const char* postid);
    using CanGenerateValidKnownLoadout = bool (*)(const char* macroname);
    using CanGenerateValidLoadout = bool (*)(UniverseID containerid, const char* macroname);
    using CanHaveCountermeasures = bool (*)();
    using CanOpenWebBrowser = bool (*)();
    using CanPlayerCommTarget = bool (*)(UniverseID componentid);
    using CanPlayerStandUp = bool (*)();
    using CanRedoConstructionMapChange = bool (*)(UniverseID holomapid);
    using CanStartTravelMode = bool (*)(UniverseID objectid);
    using CanUndoConstructionMapChange = bool (*)(UniverseID holomapid);
    using CancelConstruction = bool (*)(UniverseID containerid, BuildTaskID id);
    using CheckWeaponModCompatibility = bool (*)(UniverseID weaponid, const char* wareid);
    using CompareMapConstructionSequenceWithPlanned = bool (*)(UniverseID holomapid, UniverseID defensibleid, bool usestoredplan);
    using CopyToClipboard = bool (*)(const char*const text);
    using CreateBoardingOperation = bool (*)(UniverseID defensibletargetid, const char* boarderfactionid, uint32_t approachthreshold, uint32_t insertionthreshold);
    using DeleteSavegame = bool (*)(const char* filename);
    using DoesMapConstructionSequenceRequireBuilder = bool (*)(UniverseID holomapid, UniverseID defensibleid, bool usestoredplan);
    using DropCargo = bool (*)(UniverseID containerid, const char* wareid, uint32_t amount);
    using DropInventory = bool (*)(UniverseID entityid, const char* lockboxid, UIWareAmount* wares, uint32_t numwares);
    using EnableOrder = bool (*)(UniverseID controllableid, size_t idx);
    using EnablePlannedDefaultOrder = bool (*)(UniverseID controllableid, bool checkonly);
    using ExtendBuildPlot = bool (*)(UniverseID stationid, Coord3D poschange, Coord3D negchange, bool allowreduction);
    using FilterComponentByText = bool (*)(UniverseID componentid, uint32_t numtexts, const char** textarray, bool includecontainedobjects);
    using GetAskToSignalForControllable = bool (*)(const char* signalid, UniverseID controllableid);
    using GetAskToSignalForFaction = bool (*)(const char* signalid, const char* factionid);
    using GetBlacklistInfo = bool (*)(BlacklistInfo* info, BlacklistID id);
    using GetBoardingMarineTierAmountsFromAttacker = bool (*)(uint32_t* resultmarinetieramounts, int32_t* inputmarinetierskilllevels, uint32_t inputnummarinetiers, UniverseID defensibletargetid, UniverseID defensibleboarderid, const char* boarderfactionid);
    using GetBoxTextBoxColor = bool (*)(const int boxtextid, Color* color);
    using GetBoxTextInfo = bool (*)(const int boxtextid, TextInfo* textinfo);
    using GetBuildMapStationLocation = bool (*)(UniverseID holomapid, UIPosRot* location);
    using GetButtonHighlightColor = bool (*)(const int buttonid, Color* color);
    using GetButtonText2Details = bool (*)(const int buttonid, TextInfo* textinfo);
    using GetCheckBoxColor = bool (*)(const int checkboxid, Color* color);
    using GetChromaticAberrationOption = bool (*)();
    using GetContainerWareIsBuyable = bool (*)(UniverseID containerid, const char* wareid);
    using GetContainerWareIsSellable = bool (*)(UniverseID containerid, const char* wareid);
    using GetCustomGameStartBoolProperty = bool (*)(const char* id, const char* propertyid, CustomGameStartBoolPropertyState* state);
    using GetDefaultOrder = bool (*)(Order* result, UniverseID controllableid);
    using GetDropDownColor = bool (*)(const int dropdownid, Color* color);
    using GetDropDownHighlightColor = bool (*)(const int dropdownid, Color* color);
    using GetDropDownHotkeyDetails = bool (*)(const int dropdownid, HotkeyInfo* hotkeyinfo);
    using GetDropDownIconDetails = bool (*)(const int dropdownid, DropDownIconInfo* iconinfo);
    using GetDropDownOptionColor = bool (*)(const int dropdownid, Color* color);
    using GetDropDownText2Details = bool (*)(const int dropdownid, DropDownTextInfo* textinfo);
    using GetDropDownTextDetails = bool (*)(const int dropdownid, DropDownTextInfo* textinfo);
    using GetFontStringTitleColor = bool (*)(const int fontstringid, Color* color);
    using GetForceShootingAtCursorOption = bool (*)();
    using GetGraphBackgroundColor = bool (*)(const int graphid, Color* color);
    using GetGraphTitle = bool (*)(const int graphid, GraphTextInfo* title);
    using GetGraphXAxis = bool (*)(const int graphid, GraphAxisInfo* axis);
    using GetGraphYAxis = bool (*)(const int graphid, GraphAxisInfo* axis);
    using GetHUDSeparateRadar = bool (*)();
    using GetIconText2Details = bool (*)(const int iconid, TextInfo* textinfo);
    using GetIconTextDetails = bool (*)(const int iconid, TextInfo* textinfo);
    using GetInstalledEngineMod = bool (*)(UniverseID objectid, UIEngineMod* enginemod);
    using GetInstalledGroupedWeaponMod = bool (*)(UniverseID defensibleid, UniverseID contextid, const char* group, UIWeaponMod* weaponmod);
    using GetInstalledPaintMod = bool (*)(UniverseID objectid, UIPaintMod* paintmod);
    using GetInstalledShieldMod = bool (*)(UniverseID defensibleid, UniverseID contextid, const char* group, UIShieldMod* shieldmod);
    using GetInstalledShipMod = bool (*)(UniverseID shipid, UIShipMod* shipmod);
    using GetInstalledWeaponMod = bool (*)(UniverseID weaponid, UIWeaponMod* weaponmod);
    using GetLicenceInfo = bool (*)(LicenceInfo* result, const char* factionid, const char* licenceid);
    using GetMouseOverTextOption = bool (*)();
    using GetMouseSteeringInvertedOption = bool (*)(const char* paramname);
    using GetOrderDefinition = bool (*)(OrderDefinition* result, const char* orderdef);
    using GetPickedBuildMapEntry = bool (*)(UniverseID holomapid, UniverseID defensibleid, UIConstructionPlanEntry* result);
    using GetPickedMapMacroSlot = bool (*)(UniverseID holomapid, UniverseID defensibleid, UniverseID moduleid, const char* macroname, bool ismodule, UILoadoutSlot* result);
    using GetPlannedDefaultOrder = bool (*)(Order* result, UniverseID controllableid);
    using GetPlayerPaintThemeMod = bool (*)(UniverseID objectid, const char* macroname, UIPaintMod* paintmod);
    using GetSavesCompressedOption = bool (*)();
    using GetScreenDisplayOption = bool (*)();
    using GetShieldGroup = bool (*)(ShieldGroup* result, UniverseID defensibleid, UniverseID destructibleid);
    using GetSliderCellBackgroundColor = bool (*)(const int slidercellid, Color* color);
    using GetSliderCellFont = bool (*)(const int slidercellid, Font* font);
    using GetSliderCellInactiveBackgroundColor = bool (*)(const int slidercellid, Color* color);
    using GetSliderCellNegativeValueColor = bool (*)(const int slidercellid, Color* color);
    using GetSliderCellTextColor = bool (*)(const int slidercellid, Color* color);
    using GetSliderCellValueColor = bool (*)(const int slidercellid, Color* color);
    using GetSliderCellValues = bool (*)(const int slidercellid, SliderCellDetails* values);
    using GetSpeakTargetNameOption = bool (*)();
    using GetStatusBarMarkerColor = bool (*)(const int statusbarid, Color* color);
    using GetStatusBarNegChangeColor = bool (*)(const int statusbarid, Color* color);
    using GetStatusBarPosChangeColor = bool (*)(const int statusbarid, Color* color);
    using GetStatusBarValueColor = bool (*)(const int statusbarid, Color* color);
    using GetSyncPointInfo = bool (*)(UniverseID controllableid, size_t orderidx, SyncPointInfo* result);
    using GetTableBackgroundColor = bool (*)(const int tableid, Color* color);
    using GetUISystemInfo = bool (*)(UISystemInfo* result, UniverseID clusterid);
    using GetUp = bool (*)();
    using GetVentureOption = bool (*)();
    using GetVisitorNamesShownOption = bool (*)();
    using HasContainerBuyLimitOverride = bool (*)(UniverseID containerid, const char* wareid);
    using HasContainerSellLimitOverride = bool (*)(UniverseID containerid, const char* wareid);
    using HasControllableOwnBlacklist = bool (*)(UniverseID controllableid, const char* listtype);
    using HasControllableOwnResponse = bool (*)(UniverseID controllableid, const char* signalid);
    using HasDefaultLoadout = bool (*)(const char* macroname);
    using HasEntityMoneyLogEntries = bool (*)(UniverseID entityid);
    using HasExtension = bool (*)(const char* extensionid, bool personal);
    using HasFrameBrackets = bool (*)(const int frameid);
    using HasLimitedOxygenSupply = bool (*)();
    using HasResearched = bool (*)(const char* wareid);
    using HasSavegame = bool (*)();
    using HasSeta = bool (*)();
    using HasShipFlightAssist = bool (*)(UniverseID shipid);
    using HasStartAnimation = bool (*)();
    using HasVenturerDock = bool (*)(UniverseID containerid, UniverseID shipid, UniverseID ventureplatformid);
    using InstallEngineMod = bool (*)(UniverseID objectid, const char* wareid);
    using InstallGroupedWeaponMod = bool (*)(UniverseID defensibleid, UniverseID contextid, const char* group, const char* wareid);
    using InstallPaintMod = bool (*)(UniverseID objectid, const char* wareid, bool useinventory);
    using InstallShieldMod = bool (*)(UniverseID defensibleid, UniverseID contextid, const char* group, const char* wareid);
    using InstallShipMod = bool (*)(UniverseID shipid, const char* wareid);
    using InstallWeaponMod = bool (*)(UniverseID weaponid, const char* wareid);
    using IsAAOptionSupported = bool (*)(const char* mode);
    using IsAdvancedSatellite = bool (*)(const UniverseID componentid);
    using IsAmmoMacroCompatible = bool (*)(const char* weaponmacroname, const char* ammomacroname);
    using IsAppStoreVersion = bool (*)();
    using IsAsteroid = bool (*)(const UniverseID componentid);
    using IsAutotargetingActive = bool (*)();
    using IsBomb = bool (*)(const UniverseID componentid);
    using IsBoxTextWordWrap = bool (*)(const int boxtextid);
    using IsBuilderBusy = bool (*)(UniverseID shipid);
    using IsCheckBoxActive = bool (*)(const int checkboxid);
    using IsCheckBoxChecked = bool (*)(const int checkboxid);
    using IsCollectable = bool (*)(const UniverseID componentid);
    using IsCommander = bool (*)(const UniverseID componentid);
    using IsComponentClass = bool (*)(UniverseID componentid, const char* classname);
    using IsComponentOperational = bool (*)(UniverseID componentid);
    using IsComponentWrecked = bool (*)(UniverseID componentid);
    using IsConstructionPlanValid = bool (*)(const char* constructionplanid, uint32_t* numinvalidpatches);
    using IsContainerAmmoMacroCompatible = bool (*)(UniverseID containerid, const char* ammomacroname);
    using IsContainerFactionBuildRescricted = bool (*)(UniverseID containerid);
    using IsContainerFactionTradeRescricted = bool (*)(UniverseID containerid, const char* wareid);
    using IsContestedSector = bool (*)(UniverseID sectorid);
    using IsControlPanelHacked = bool (*)(UIComponentSlot controlpanel);
    using IsControlPressed = bool (*)();
    using IsConversationActive = bool (*)();
    using IsCrate = bool (*)(const UniverseID componentid);
    using IsCrystal = bool (*)(const UniverseID componentid);
    using IsCurrentGPUDiscrete = bool (*)();
    using IsCurrentOrderCritical = bool (*)(UniverseID controllableid);
    using IsCurrentlyScanning = bool (*)();
    using IsCustomGameStartPropertyChanged = bool (*)(const char* id, const char* propertyid);
    using IsDefensibleBeingBoardedBy = bool (*)(UniverseID defensibleid, const char* factionid);
    using IsDemoVersion = bool (*)();
    using IsDeployableMacroCompatible = bool (*)(UniverseID containerid, const char* macroname, const char* deployablemacroname);
    using IsDestructible2 = bool (*)(const UniverseID componentid, const char*const connectionname);
    using IsDetailUIElement = bool (*)(const UniverseID componentid, const char*const connectionname);
    using IsDroneTypeArmed = bool (*)(UniverseID defensibleid, const char* dronetype);
    using IsDroneTypeBlocked = bool (*)(UniverseID defensibleid, const char* dronetype);
    using IsDropDownActive = bool (*)(const int dropdownid);
    using IsDropDownMouseOverInteractionAllowed = bool (*)(const int dropdownid);
    using IsEditBoxActive = bool (*)(const int editboxid);
    using IsEditBoxInputEncrypted = bool (*)(const int editboxid);
    using IsEditBoxTextHidden = bool (*)(const int editboxid);
    using IsEditBoxTextSelectedOnActivation = bool (*)(const int editboxid);
    using IsEntity = bool (*)(const UniverseID componentid);
    using IsErrorLogActive = bool (*)();
    using IsExternalTargetMode = bool (*)();
    using IsExternalViewActive = bool (*)();
    using IsFPSEnabled = bool (*)();
    using IsFactionAllyToFaction = bool (*)(const char* factionid, const char* otherfactionid);
    using IsFactionEnemyToFaction = bool (*)(const char* factionid, const char* otherfactionid);
    using IsFactionHQ = bool (*)(UniverseID stationid);
    using IsFullscreenMenuDisplayed = bool (*)(bool anymenu, const char* menuname);
    using IsGOGVersion = bool (*)();
    using IsGameModified = bool (*)();
    using IsGamePaused = bool (*)();
    using IsHQ = bool (*)(UniverseID stationid);
    using IsHUDActive = bool (*)();
    using IsHUDRadarActive = bool (*)();
    using IsIconValid = bool (*)(const char* iconid);
    using IsInfoUnlockedForPlayer = bool (*)(UniverseID componentid, const char* infostring);
    using IsJoystickSteeringAdapative = bool (*)();
    using IsKnownItemRead = bool (*)(const char* libraryid, const char* itemid);
    using IsKnownRead = bool (*)(UniverseID componentid);
    using IsKnownToPlayer = bool (*)(UniverseID componentid);
    using IsLanguageSettingEnabled = bool (*)();
    using IsLanguageValid = bool (*)();
    using IsLaserTower = bool (*)(const UniverseID componentid);
    using IsLeftMouseButtonDown = bool (*)();
    using IsLoadoutValid = bool (*)(UniverseID defensibleid, const char* macroname, const char* loadoutid, uint32_t* numinvalidpatches);
    using IsLockbox = bool (*)(const UniverseID componentid);
    using IsLowOnOxygen = bool (*)();
    using IsMasterVersion = bool (*)();
    using IsMiniWidgetSystemUsed = bool (*)();
    using IsMissileIncoming = bool (*)();
    using IsMissileLockingOn = bool (*)();
    using IsMouseDoubleClickMode = bool (*)();
    using IsMouseEmulationActive = bool (*)();
    using IsMouseSteeringAdapative = bool (*)();
    using IsNavBeacon = bool (*)(const UniverseID componentid);
    using IsNetworkEngineEnabled = bool (*)();
    using IsNextStartAnimationSkipped = bool (*)(bool reset);
    using IsObjectKnown = bool (*)(const UniverseID componentid);
    using IsOnlineEnabled = bool (*)();
    using IsOrderSelectableFor = bool (*)(const char* orderdefid, UniverseID controllableid);
    using IsPerson = bool (*)(NPCSeed person, UniverseID controllableid);
    using IsPersonTransferScheduled = bool (*)(UniverseID controllableid, NPCSeed person);
    using IsPlayerBlacklistDefault = bool (*)(BlacklistID id, const char* listtype, const char* defaultgroup);
    using IsPlayerCameraTargetViewPossible = bool (*)(UniverseID targetid, bool force);
    using IsPlayerValid = bool (*)();
    using IsPointingWithinAimingRange = bool (*)();
    using IsPresentModeOptionSupported = bool (*)(const char* mode);
    using IsRealComponentClass = bool (*)(UniverseID componentid, const char* classname);
    using IsResourceProbe = bool (*)(const UniverseID componentid);
    using IsSatellite = bool (*)(const UniverseID componentid);
    using IsSaveListLoadingComplete = bool (*)();
    using IsSaveValid = bool (*)(const char* filename);
    using IsSetaActive = bool (*)();
    using IsShiftPressed = bool (*)();
    using IsShip = bool (*)(const UniverseID componentid);
    using IsShipAtExternalDock = bool (*)(UniverseID shipid);
    using IsShipBeingRetrieved = bool (*)(UniverseID shipid);
    using IsSofttargetManagerActive = bool (*)();
    using IsSoftwareDefault = bool (*)(UniverseID controllableid, const char* macroname, const char* softwarename);
    using IsStartmenu = bool (*)();
    using IsStation = bool (*)(const UniverseID componentid);
    using IsStationary = bool (*)(const UniverseID componentid);
    using IsSupplyManual = bool (*)(UniverseID containerid, const char* type);
    using IsSurfaceElement = bool (*)(const UniverseID componentid);
    using IsTableMultiSelect = bool (*)(const int tableid);
    using IsTableRowBorderBelowEnabled = bool (*)(const int tableid, uint32_t row);
    using IsTargetInPlayerWeaponRange = bool (*)(const UniverseID componentid);
    using IsTargetMonitorNotification = bool (*)(const int notificationid);
    using IsTargetable = bool (*)(const uint32_t messageid);
    using IsThrottleBidirectional = bool (*)();
    using IsTitleFontString = bool (*)(const int fontstringid);
    using IsTobiiAvailable = bool (*)();
    using IsTradeShowVersion = bool (*)();
    using IsTurretGroupArmed = bool (*)(UniverseID defensibleid, UniverseID contextid, const char* path, const char* group);
    using IsUnit = bool (*)(UniverseID controllableid);
    using IsUnitMacroCompatible = bool (*)(UniverseID containerid, const char* macroname, const char* unitmacroname);
    using IsUpgradeGroupMacroCompatible = bool (*)(UniverseID destructibleid, const char* macroname, const char* path, const char* group, const char* upgradetypename, const char* upgrademacroname);
    using IsUpgradeMacroCompatible = bool (*)(UniverseID objectid, UniverseID moduleid, const char* macroname, bool ismodule, const char* upgradetypename, size_t slot, const char* upgrademacroname);
    using IsVRMode = bool (*)();
    using IsVROculusTouchActive = bool (*)();
    using IsVRPointerActive = bool (*)();
    using IsVRVersion = bool (*)();
    using IsVRViveControllerActive = bool (*)();
    using IsValidComponent = bool (*)(const UniverseID componentid);
    using IsVentureShip = bool (*)(const UniverseID componentid);
    using IsVirtualUpgradeMacroCompatible = bool (*)(UniverseID defensibleid, const char* macroname, const char* upgradetypename, size_t slot, const char* upgrademacroname);
    using IsWeaponArmed = bool (*)(UniverseID weaponid);
    using IsWillingToBuyFromPlayer = bool (*)(UniverseID componentid, const char* warename);
    using IsWillingToSellToPlayer = bool (*)(UniverseID componentid, const char* warename);
    using IsZone = bool (*)(const UniverseID componentid);
    using MarkIndicatorShown = bool (*)(const UniverseID componentid);
    using PerformCompSlotPlayerAction = bool (*)(UIComponentSlot compslot, uint32_t actionid);
    using QueryGameServers = bool (*)();
    using QuickDock = bool (*)();
    using QuickMenuAccess = bool (*)(const char* menu);
    using RemoveAllOrders = bool (*)(UniverseID controllableid);
    using RemoveAttackerFromBoardingOperation = bool (*)(UniverseID defensibleboarderid);
    using RemoveBuildPlot = bool (*)(UniverseID stationid);
    using RemoveCommander2 = bool (*)(UniverseID controllableid);
    using RemoveConstructionPlan = bool (*)(const char* source, const char* id);
    using RemoveLoadout = bool (*)(const char* source, const char* macroname, const char* localid);
    using RemoveOrder = bool (*)(UniverseID controllableid, size_t idx, bool playercancelled, bool checkonly);
    using RemoveOrder2 = bool (*)(UniverseID controllableid, size_t idx, bool playercancelled, bool checkonly, bool onlyimmediate);
    using RequestDockAt = bool (*)(UniverseID containerid, bool checkonly);
    using RequestShipFromInternalStorage2 = bool (*)(UniverseID shipid, bool highpriority, UniverseID refcomponentid);
    using ResetResponseToSignalForControllable = bool (*)(const char* signalid, UniverseID controllableid);
    using SetActiveFrame = bool (*)(const int frameid);
    using SetActiveMission = bool (*)(MissionID missionid);
    using SetAmmoOfWeapon = bool (*)(UniverseID weaponid, const char* newammomacro);
    using SetCommander = bool (*)(UniverseID controllableid, UniverseID commanderid, const char* assignment);
    using SetDefaultResponseToSignalForControllable = bool (*)(const char* newresponse, bool ask, const char* signalid, UniverseID controllableid);
    using SetDefaultResponseToSignalForFaction = bool (*)(const char* newresponse, bool ask, const char* signalid, const char* factionid);
    using SetEntityToPost = bool (*)(UniverseID controllableid, UniverseID entityid, const char* postid);
    using SetFrameInteractiveObject = bool (*)(const int frameid, const int objectid);
    using SetOrderSyncPointID = bool (*)(UniverseID controllableid, size_t orderidx, uint32_t syncid, bool checkonly);
    using SetRadarRenderTarget = bool (*)(const char*const rendertargettexture, const UniverseID referencecomponent, const bool mapmode);
    using SetRadarRenderTargetOnTarget = bool (*)(const char*const rendertargettexture, const UniverseID focuscomponentid, const UniverseID referencecomponent, const bool mapmode);
    using SetSofttarget = bool (*)(UniverseID componentid, const char*const connectionname);
    using SetStationOverviewGraphWare = bool (*)(UniverseID stationid, const char* wareid, bool value);
    using ShouldEditBoxRestoreInteractiveObject = bool (*)(const int editboxid);
    using ShouldSubordinateGroupDockAtCommander = bool (*)(UniverseID controllableid, int group);
    using ShowGamepadTextInput = bool (*)(const char* description, uint32_t maxchars, const char* existingtext, bool multilines, bool password);
    using ShuffleMapConstructionPlan = bool (*)(UniverseID holomapid, bool checkonly);
    using StartBoardingOperation = bool (*)(UniverseID defensibletargetid, const char* boarderfactionid);
    using StopPanMap = bool (*)(UniverseID holomapid);
    using StopRotateMap = bool (*)(UniverseID holomapid);
    using TakeShipFromInternalStorage = bool (*)(UniverseID shipid, bool highpriority, bool checkonly);
    using TeleportPlayerTo = bool (*)(UniverseID controllableid, bool allowcontrolling, bool instant, bool force);
    using ToggleAutoPilot = bool (*)(bool checkonly);
    using TriggerCompSlotAnimation = bool (*)(UniverseID componentid, const char* connectionname, const char* triggername);
    using UpdateAttackerOfBoardingOperation = bool (*)(UniverseID defensibletargetid, UniverseID defensibleboarderid, const char* boarderfactionid, const char* actionid, uint32_t* marinetieramounts, int32_t* marinetierskilllevels, uint32_t nummarinetiers);
    using UpdateBoardingOperation = bool (*)(UniverseID defensibletargetid, const char* boarderfactionid, uint32_t approachthreshold, uint32_t insertionthreshold);
    using CanTeleportPlayerTo = const char* (*)(UniverseID controllableid, bool allowcontrolling, bool force);
    using GenerateFactionRelationText = const char* (*)(const char* factionid);
    using GetAAOption = const char* (*)(bool useconfig);
    using GetBoardingActionOfAttacker = const char* (*)(UniverseID defensibletargetid, UniverseID defensibleboarderid, const char* boarderfactionid);
    using GetBuildVersionSuffix = const char* (*)();
    using GetCheckBoxSymbol = const char* (*)(const int checkboxid);
    using GetCompSlotPlayerActionTriggeredConnection = const char* (*)(UniverseID componentid, const char* connectionname);
    using GetComponentClass = const char* (*)(UniverseID componentid);
    using GetComponentName = const char* (*)(UniverseID componentid);
    using GetControlPanelName = const char* (*)(UIComponentSlot controlpanel);
    using GetCurrentAmmoOfWeapon = const char* (*)(UniverseID weaponid);
    using GetCurrentBoardingPhase = const char* (*)(UniverseID defensibletargetid, const char* boarderfactionid);
    using GetCurrentDroneMode = const char* (*)(UniverseID defensibleid, const char* dronetype);
    using GetCurrentGPUNiceName = const char* (*)();
    using GetCurrentSoundDevice = const char* (*)();
    using GetCustomGameStartStringProperty = const char* (*)(const char* id, const char* propertyid, CustomGameStartStringPropertyState* state);
    using GetDefaultResponseToSignalForControllable = const char* (*)(const char* signalid, UniverseID controllableid);
    using GetDefaultResponseToSignalForFaction = const char* (*)(const char* signalid, const char* factionid);
    using GetDetailmonitorCutsceneKey = const char* (*)(uint32_t cutsceneid);
    using GetDropDownStartOption = const char* (*)(const int dropdownid);
    using GetEditBoxDefaultText = const char* (*)(const int editboxid);
    using GetEditBoxDescription = const char* (*)(const int editboxid);
    using GetEntityActiveIcon = const char* (*)(const UniverseID componentid);
    using GetEntityInactiveIcon = const char* (*)(const UniverseID componentid);
    using GetEntitySelectedIcon = const char* (*)(const UniverseID componentid);
    using GetEquipmentModPropertyName = const char* (*)(const char* wareid);
    using GetFactionNameForTargetMonitorHack = const char* (*)(UniverseID componentid);
    using GetFleetName = const char* (*)(UniverseID controllableid);
    using GetLocalizedInputName = const char* (*)(uint32_t sourceid, uint32_t codeid);
    using GetLocalizedInteractiveNotificationKey = const char* (*)();
    using GetLocalizedRawMouseButtonName = const char* (*)(uint32_t keycodeid);
    using GetLocalizedText = const char* (*)(uint32_t pageid, uint32_t textid, const char* defaultvalue);
    using GetMacroClass = const char* (*)(const char* macroname);
    using GetMacroMapPositionOnEcliptic = const char* (*)(UniverseID holomapid, UIPosRot* position);
    using GetMappedInputName = const char* (*)(const char* functionkey);
    using GetMissingConstructionPlanBlueprints = const char* (*)(UniverseID containerid, const char* constructionplanid);
    using GetMouseOverText = const char* (*)(const int widgetid);
    using GetObjectIDCode = const char* (*)(UniverseID objectid);
    using GetPersonName = const char* (*)(NPCSeed person, UniverseID controllableid);
    using GetPersonRole = const char* (*)(NPCSeed person, UniverseID controllableid);
    using GetPersonRoleName = const char* (*)(NPCSeed person, UniverseID controllableid);
    using GetPlayerClothingTheme = const char* (*)();
    using GetPlayerFactionName = const char* (*)(bool userawname);
    using GetPlayerName = const char* (*)();
    using GetPlayerPaintTheme = const char* (*)();
    using GetPlayerShipSize = const char* (*)();
    using GetPresentModeOption = const char* (*)();
    using GetPurposeName = const char* (*)(const char* purposeid);
    using GetRealComponentClass = const char* (*)(UniverseID componentid);
    using GetSSROption2 = const char* (*)();
    using GetSaveLocationName = const char* (*)();
    using GetShipOrLaserTowerSize = const char* (*)(const UniverseID componentid);
    using GetShipPurpose = const char* (*)(const UniverseID componentid);
    using GetSliderCellSuffix = const char* (*)(const int slidercellid);
    using GetSliderCellText = const char* (*)(const int slidercellid);
    using GetSlotSize = const char* (*)(UniverseID defensibleid, UniverseID moduleid, const char* macroname, bool ismodule, const char* upgradetypename, size_t slot);
    using GetSoftwareMaxCompatibleVersion = const char* (*)(UniverseID controllableid, const char* macroname, const char* softwarename);
    using GetSteamID = const char* (*)();
    using GetSubordinateGroupAssignment = const char* (*)(UniverseID controllableid, int group);
    using GetTableBackgroundID = const char* (*)(const int tableid);
    using GetTextureQualityOption = const char* (*)();
    using GetTobiiMode = const char* (*)();
    using GetTrackerNameOption = const char* (*)();
    using GetTrackerSDKOption = const char* (*)();
    using GetTransporterLocationName = const char* (*)(UIComponentSlot transporter);
    using GetTurretGroupMode2 = const char* (*)(UniverseID defensibleid, UniverseID contextid, const char* path, const char* group);
    using GetUpgradeSlotCurrentMacro = const char* (*)(UniverseID objectid, UniverseID moduleid, const char* upgradetypename, size_t slot);
    using GetVirtualUpgradeSlotCurrentMacro = const char* (*)(UniverseID defensibleid, const char* upgradetypename, size_t slot);
    using GetWeaponMode = const char* (*)(UniverseID weaponid);
    using RequestDockAtReason = const char* (*)(UniverseID containerid, bool checkonly);
    using UndockPlayerShip = const char* (*)(bool checkonly);
    using GetBuildDuration = double (*)(UniverseID containerid, UIBuildOrderList order);
    using GetBuildProcessorEstimatedTimeLeft = double (*)(UniverseID buildprocessorid);
    using GetBuildTaskDuration = double (*)(UniverseID containerid, BuildTaskID id);
    using GetContainerWareConsumption = double (*)(UniverseID containerid, const char* wareid, bool ignorestate);
    using GetContainerWareProduction = double (*)(UniverseID containerid, const char* wareid, bool ignorestate);
    using GetControlPanelHackExpireTime = double (*)(UIComponentSlot controlpanel);
    using GetCurrentGameTime = double (*)();
    using GetAdaptiveSamplingOption = float (*)();
    using GetCockpitCameraScaleOption = float (*)();
    using GetContainerBuildPriceFactor = float (*)(UniverseID containerid);
    using GetContainerGlobalPriceFactor = float (*)(UniverseID containerid);
    using GetCurrentBuildProgress = float (*)(UniverseID containerid);
    using GetDefensibleLoadoutLevel = float (*)(UniverseID defensibleid);
    using GetPlayerGlobalLoadoutLevel = float (*)();
    using GetRectangleTargetElementExtents = float (*)(const int posid);
    using GetRemainingOxygen = float (*)();
    using GetResourceBoxSize = float (*)();
    using GetScanProgress = float (*)();
    using GetShieldHullBarHullPercent = float (*)(const int shieldhullbarid);
    using GetShieldHullBarShieldPercent = float (*)(const int shieldhullbarid);
    using GetStatusBarCurrentValue = float (*)(const int statusbarid);
    using GetStatusBarMaxValue = float (*)(const int statusbarid);
    using GetStatusBarStartValue = float (*)(const int statusbarid);
    using GetTextHeight = float (*)(const char*const text, const char*const fontname, const uint32_t fontsize, const float wordwrapwidth);
    using GetTextWidth = float (*)(const char*const text, const char*const fontname, const float fontsize);
    using GetTobiiAngleFactor = float (*)();
    using GetTobiiDeadzoneAngle = float (*)();
    using GetTobiiDeadzonePosition = float (*)();
    using GetTobiiGazeAngleFactor = float (*)();
    using GetTobiiGazeDeadzone = float (*)();
    using GetTobiiHeadPositionFactor = float (*)();
    using GetUIScale = float (*)(const bool scalewithresolution);
    using GetUIScaleFactor = float (*)();
    using GetConfigSetting = int (*)(const char*const setting);
    using GetNotificationID = int (*)(const size_t num);
    using GetPriorityMissiontargetPOSID = int (*)();
    using GetTableNextConnectedTable = int (*)(const int tableid);
    using GetTableNextHorizontalConnectedTable = int (*)(const int tableid);
    using GetTablePreviousConnectedTable = int (*)(const int tableid);
    using GetTablePreviousHorizontalConnectedTable = int (*)(const int tableid);
    using GetVRVivePointerHand = int (*)();
    using GetContainerBuyLimit = int32_t (*)(UniverseID containerid, const char* wareid);
    using GetContainerSellLimit = int32_t (*)(UniverseID containerid, const char* wareid);
    using GetCurrentLanguage = int32_t (*)();
    using GetEditBoxTextOffsetY = int32_t (*)(const int editboxid);
    using GetEntityCombinedSkill = int32_t (*)(UniverseID entityid, const char* role, const char* postid);
    using GetPersonCombinedSkill = int32_t (*)(UniverseID controllableid, NPCSeed person, const char* role, const char* postid);
    using GetPersonTier = int32_t (*)(NPCSeed npc, const char* role, UniverseID controllableid);
    using GetRequestedLanguage = int32_t (*)();
    using GetShipCombinedSkill = int32_t (*)(UniverseID shipid);
    using GetSliderCellAccuracyOverride = int32_t (*)(const int slidercellid);
    using GetUIRelation = int32_t (*)(const char* fromfactionid, const char* tofactionid);
    using GetBuildPlotPayment = int64_t (*)(UniverseID stationid, bool* positionchanged);
    using GetBuildPlotPrice = int64_t (*)(UniverseID sectorid, UIPosRot location, float x, float y, float z, const char* factionid);
    using GetBuildWarePrice = int64_t (*)(UniverseID containerid, const char* warename);
    using GetBuilderHiringFee = int64_t (*)();
    using GetCreditsDueFromPlayerTrades = int64_t (*)();
    using GetCustomGameStartMoneyProperty = int64_t (*)(const char* id, const char* propertyid, CustomGameStartMoneyPropertyState* state);
    using GetRepairPrice = int64_t (*)(UniverseID componenttorepairid, UniverseID containerid);
    using GetSupplyBudget = int64_t (*)(UniverseID containerid);
    using GetBuildMapConstructionPlan = size_t (*)(UniverseID holomapid, UniverseID defensibleid, bool usestoredplan, UIConstructionPlanEntry* result, uint32_t resultlen);
    using GetConstructionMapVenturePlatform = size_t (*)(UniverseID holomapid, size_t venturedockidx);
    using GetNumAcceptedMissions = size_t (*)();
    using GetNumBuildMapConstructionPlan = size_t (*)(UniverseID holomapid, bool usestoredplan);
    using GetNumNotifications = size_t (*)();
    using GetNumPlannedStationModules = size_t (*)(UniverseID defensibleid, bool includeall);
    using GetNumPrimaryWeapons = size_t (*)();
    using GetNumSecondaryWeapons = size_t (*)();
    using GetNumTradeComputerOrders = size_t (*)(UniverseID controllableid);
    using GetNumTurretSlots = size_t (*)();
    using GetNumTurrets = size_t (*)();
    using GetNumUpgradeSlots = size_t (*)(UniverseID destructibleid, const char* macroname, const char* upgradetypename);
    using GetNumVirtualUpgradeSlots = size_t (*)(UniverseID objectid, const char* macroname, const char* upgradetypename);
    using GetNumWeaponSlots = size_t (*)();
    using GetPlannedStationModules = size_t (*)(UIConstructionPlanEntry* result, uint32_t resultlen, UniverseID defensibleid, bool includeall);
    using GetSelectedBuildMapEntry = size_t (*)(UniverseID holomapid);
    using GetTobiiGazeFilterStrength = size_t (*)();
    using GetTobiiHeadFilterStrength = size_t (*)();
    using CreateOrder = uint32_t (*)(UniverseID controllableid, const char* orderid, bool defaultorder);
    using CreateOrder2 = uint32_t (*)(UniverseID controllableid, const char* orderid, bool defaultorder, bool isoverride);
    using GetActivePrimaryWeaponGroup = uint32_t (*)();
    using GetActiveSecondaryWeaponGroup = uint32_t (*)();
    using GetAllBlacklists = uint32_t (*)(BlacklistID* result, uint32_t resultlen);
    using GetAllBoardingBehaviours = uint32_t (*)(BoardingBehaviour* result, uint32_t resultlen);
    using GetAllBoardingPhases = uint32_t (*)(BoardingPhase* result, uint32_t resultlen);
    using GetAllControlPosts = uint32_t (*)(ControlPostInfo* result, uint32_t resultlen);
    using GetAllCountermeasures = uint32_t (*)(AmmoData* result, uint32_t resultlen, UniverseID defensibleid);
    using GetAllEquipment = uint32_t (*)(EquipmentWareInfo* result, uint32_t resultlen, bool playerblueprint);
    using GetAllEquipmentModProperties = uint32_t (*)(EquipmentModPropertyInfo* result, uint32_t resultlen, const char* equipmentmodclass);
    using GetAllFactionShips = uint32_t (*)(UniverseID* result, uint32_t resultlen, const char* factionid);
    using GetAllFactionStations = uint32_t (*)(UniverseID* result, uint32_t resultlen, const char* factionid);
    using GetAllFactions = uint32_t (*)(const char** result, uint32_t resultlen, bool includehidden);
    using GetAllInventoryBombs = uint32_t (*)(AmmoData* result, uint32_t resultlen, UniverseID entityid);
    using GetAllLaserTowers = uint32_t (*)(AmmoData* result, uint32_t resultlen, UniverseID defensibleid);
    using GetAllMines = uint32_t (*)(AmmoData* result, uint32_t resultlen, UniverseID defensibleid);
    using GetAllMissiles = uint32_t (*)(AmmoData* result, uint32_t resultlen, UniverseID defensibleid);
    using GetAllModuleSets = uint32_t (*)(UIModuleSet* result, uint32_t resultlen);
    using GetAllNavBeacons = uint32_t (*)(AmmoData* result, uint32_t resultlen, UniverseID defensibleid);
    using GetAllRaces = uint32_t (*)(RaceInfo* result, uint32_t resultlen);
    using GetAllResourceProbes = uint32_t (*)(AmmoData* result, uint32_t resultlen, UniverseID defensibleid);
    using GetAllResponsesToSignal = uint32_t (*)(ResponseInfo* result, uint32_t resultlen, const char* signalid);
    using GetAllRoles = uint32_t (*)(PeopleInfo* result, uint32_t resultlen);
    using GetAllSatellites = uint32_t (*)(AmmoData* result, uint32_t resultlen, UniverseID defensibleid);
    using GetAllShipMacros = uint32_t (*)(const char** result, uint32_t resultlen, bool playerblueprint);
    using GetAllSignals = uint32_t (*)(SignalInfo* result, uint32_t resultlen);
    using GetAllUnits = uint32_t (*)(UnitData* result, uint32_t resultlen, UniverseID defensibleid, bool onlydrones);
    using GetAllowedWeaponSystems = uint32_t (*)(WeaponSystemInfo* result, uint32_t resultlen, UniverseID defensibleid, size_t orderidx, bool usedefault);
    using GetAmmoStorage = uint32_t (*)(AmmoData* result, uint32_t resultlen, UniverseID defensibleid, const char* ammotype);
    using GetAmountOfWareAvailable = uint32_t (*)(const char* wareid, UniverseID productionmoduleid);
    using GetAssignedConstructionVessels = uint32_t (*)(UniverseID* result, uint32_t resultlen, UniverseID containerid);
    using GetAttackersOfBoardingOperation = uint32_t (*)(UniverseID* result, uint32_t resultlen, UniverseID defensibletargetid, const char* boarderfactionid);
    using GetAvailableClothingThemes = uint32_t (*)(UIClothingTheme* result, uint32_t resultlen);
    using GetAvailableEquipment = uint32_t (*)(EquipmentWareInfo* result, uint32_t resultlen, UniverseID containerid, const char* classid);
    using GetAvailableEquipmentMods = uint32_t (*)(UIEquipmentMod* result, uint32_t resultlen);
    using GetAvailableLockboxes = uint32_t (*)(const char** result, uint32_t resultlen, UniverseID entityid);
    using GetAvailablePaintThemes = uint32_t (*)(UIPaintTheme* result, uint32_t resultlen);
    using GetBlueprints = uint32_t (*)(UIBlueprint* result, uint32_t resultlen, const char* set, const char* category, const char* macroname);
    using GetBoardingCasualtiesOfTier = uint32_t (*)(int32_t marinetierskilllevel, UniverseID defensibletargetid, const char* boarderfactionid);
    using GetBoardingStrengthFromOperation = uint32_t (*)(UniverseID defensibletargetid, const char* boarderfactionid);
    using GetBoardingStrengthOfControllableTierAmounts = uint32_t (*)(UniverseID controllableid, uint32_t* marinetieramounts, int32_t* marinetierskilllevels, uint32_t nummarinetiers);
    using GetBuildModules = uint32_t (*)(UniverseID* result, uint32_t resultlen, UniverseID containerid);
    using GetBuildSequenceResources = uint32_t (*)(UIWareInfo* result, uint32_t resultlen);
    using GetBuildTasks = uint32_t (*)(BuildTaskInfo* result, uint32_t resultlen, UniverseID containerid, UniverseID buildmoduleid, bool isinprogress, bool includeupgrade);
    using GetCargo = uint32_t (*)(UIWareInfo* result, uint32_t resultlen, UniverseID containerid, const char* tags);
    using GetCargoStatistics = uint32_t (*)(UICargoStat* result, uint32_t resultlen, size_t numdatapoints);
    using GetCargoTransportTypes = uint32_t (*)(StorageInfo* result, uint32_t resultlen, UniverseID containerid, bool merge, bool aftertradeorders);
    using GetCloseOnUnhandledClickFrames = uint32_t (*)(int* result, uint32_t resultlen);
    using GetCompSlotPlayerActions = uint32_t (*)(UIAction* result, uint32_t resultlen, UIComponentSlot compslot);
    using GetConstructionPlanInvalidPatches = uint32_t (*)(InvalidPatchInfo* result, uint32_t resultlen, const char* constructionplanid);
    using GetConstructionPlans = uint32_t (*)(UIConstructionPlan* result, uint32_t resultlen);
    using GetContainerAllowedBuildFactions = uint32_t (*)(const char** result, uint32_t resultlen, UniverseID containerid);
    using GetContainerBuildResources = uint32_t (*)(const char** result, uint32_t resultlen, UniverseID containerid);
    using GetContainerBuilderMacros = uint32_t (*)(const char** result, uint32_t resultlen, UniverseID containerid);
    using GetContainerStockLimitOverrides = uint32_t (*)(UIWareInfo* result, uint32_t resultlen, UniverseID containerid);
    using GetContainerWareReservations = uint32_t (*)(WareReservationInfo* result, uint32_t resultlen, UniverseID containerid);
    using GetControlPanelNumRequiredWares = uint32_t (*)(UIComponentSlot controlpanel);
    using GetControlPanelRequiredWares = uint32_t (*)(UIWareInfo* result, uint32_t resultlen, UIComponentSlot controlpanel);
    using GetCurrentMissionOffers = uint32_t (*)(uint64_t* result, uint32_t resultlen, bool showninbbs);
    using GetCurrentVentureShips = uint32_t (*)(UniverseID* result, uint32_t resultlen, UniverseID ventureplatformid);
    using GetCustomGameStartBlueprintDefaultProperty = uint32_t (*)(CustomGameStartBlueprint* result, uint32_t resultlen, const char* id, const char* propertyid);
    using GetCustomGameStartBlueprintProperty = uint32_t (*)(CustomGameStartBlueprint* result, uint32_t resultlen, const char* id, const char* propertyid);
    using GetCustomGameStartEncyclopediaProperty = uint32_t (*)(CustomGameStartEncyclopediaEntry* result, uint32_t resultlen, const char* id, const char* propertyid);
    using GetCustomGameStartEncyclopediaPropertyCounts = uint32_t (*)(const char* id, const char* propertyid);
    using GetCustomGameStartInventoryDefaultProperty = uint32_t (*)(CustomGameStartInventory* result, uint32_t resultlen, const char* id, const char* propertyid);
    using GetCustomGameStartInventoryProperty = uint32_t (*)(CustomGameStartInventory* result, uint32_t resultlen, const char* id, const char* propertyid);
    using GetCustomGameStartRelationsProperty = uint32_t (*)(CustomGameStartRelationInfo* result, uint32_t resultlen, const char* id, const char* propertyid);
    using GetCustomGameStartRelationsPropertyCounts = uint32_t (*)(const char* id, const char* propertyid);
    using GetCustomGameStartResearchProperty = uint32_t (*)(const char** result, uint32_t resultlen, const char* id, const char* propertyid);
    using GetCustomGameStartResearchPropertyCounts = uint32_t (*)(const char* id, const char* propertyid);
    using GetDamagedSubComponents = uint32_t (*)(UniverseID* result, uint32_t resultlen, UniverseID objectid);
    using GetDefaultCountermeasureStorageCapacity = uint32_t (*)(const char* macroname);
    using GetDefaultMissileStorageCapacity = uint32_t (*)(const char* macroname);
    using GetDefensibleActiveWeaponGroup = uint32_t (*)(UniverseID defensibleid, bool primary);
    using GetDefensibleDPS = uint32_t (*)(DPSData* result, UniverseID defensibleid, bool primary, bool secondary, bool lasers, bool missiles, bool turrets, bool includeheat, bool includeinactive);
    using GetDefensibleDeployableCapacity = uint32_t (*)(UniverseID defensibleid);
    using GetDockedShips = uint32_t (*)(UniverseID* result, uint32_t resultlen, UniverseID dockingbayorcontainerid, const char* factionid);
    using GetDroneModes = uint32_t (*)(DroneModeInfo* result, uint32_t resultlen, UniverseID defensibleid, const char* dronetype);
    using GetDropDownOptionHeight = uint32_t (*)(const int dropdownid);
    using GetDropDownOptionWidth = uint32_t (*)(const int dropdownid);
    using GetDropDownOptions = uint32_t (*)(DropDownOption* result, uint32_t resultlen, const int dropdownid);
    using GetEditBoxTextOffsetX = uint32_t (*)(const int editboxid);
    using GetFormationShapes = uint32_t (*)(UIFormationInfo* result, uint32_t resultlen);
    using GetFreeCountermeasureStorageAfterTradeOrders = uint32_t (*)(UniverseID defensibleid);
    using GetFreeDeployableStorageAfterTradeOrders = uint32_t (*)(UniverseID defensibleid);
    using GetFreeMissileStorageAfterTradeOrders = uint32_t (*)(UniverseID defensibleid);
    using GetFreePeopleCapacity = uint32_t (*)(UniverseID controllableid);
    using GetGraphData = uint32_t (*)(GraphDataPoint* result, uint32_t resultlen, const int graphid, const size_t datarecordidx);
    using GetGraphDataRecords = uint32_t (*)(GraphDataRecord* result, uint32_t resultlen, int graphid);
    using GetGraphIcons = uint32_t (*)(GraphIcon* result, uint32_t resultlen, int graphid);
    using GetGraphType = uint32_t (*)(const int graphid);
    using GetHQs = uint32_t (*)(UniverseID* result, uint32_t resultlen, const char* factionid);
    using GetIllegalToFactions = uint32_t (*)(const char** result, uint32_t resultlen, const char* wareid);
    using GetInventoryPaintMods = uint32_t (*)(UIPaintMod* result, uint32_t resultlen);
    using GetLUTMode = uint32_t (*)();
    using GetLanguages = uint32_t (*)(LanguageInfo* result, uint32_t resultlen);
    using GetLibraryEntryAliases = uint32_t (*)(const char** result, uint32_t resultlen, const char* librarytypeid, const char* id);
    using GetLoadoutCounts = uint32_t (*)(UILoadoutCounts* result, UniverseID defensibleid, const char* macroname, const char* loadoutid);
    using GetLoadoutInvalidPatches = uint32_t (*)(InvalidPatchInfo* result, uint32_t resultlen, UniverseID defensibleid, const char* macroname, const char* loadoutid);
    using GetLoadoutsInfo = uint32_t (*)(UILoadoutInfo* result, uint32_t resultlen, UniverseID componentid, const char* macroname);
    using GetMacroDeployableCapacity = uint32_t (*)(const char* macroname);
    using GetMacroMissileCapacity = uint32_t (*)(const char* macroname);
    using GetMapComponentMissions = uint32_t (*)(MissionID* result, uint32_t resultlen, UniverseID holomapid, UniverseID componentid);
    using GetMapRenderedComponents = uint32_t (*)(UniverseID* result, uint32_t resultlen, UniverseID holomapid);
    using GetMapSelectedComponents = uint32_t (*)(UniverseID* result, uint32_t resultlen, UniverseID holomapid);
    using GetMaxProductionStorage = uint32_t (*)(UIWareAmount* result, uint32_t resultlen, UniverseID containerid);
    using GetMessages = uint32_t (*)(MessageInfo* result, uint32_t resultlen, size_t start, size_t count, const char* categoryname);
    using GetMineablesAtSectorPos = uint32_t (*)(YieldInfo* result, uint32_t resultlen, UniverseID sectorid, Coord3D position);
    using GetMissileCargo = uint32_t (*)(UIWareInfo* result, uint32_t resultlen, UniverseID containerid);
    using GetMissingBuildResources = uint32_t (*)(UIWareInfo* result, uint32_t resultlen);
    using GetMissingLoadoutResources = uint32_t (*)(UIWareInfo* result, uint32_t resultlen);
    using GetMissionThreadSubMissions = uint32_t (*)(MissionID* result, uint32_t resultlen, MissionID missionid);
    using GetModuleNeededResources = uint32_t (*)(UIWareInfo* result, uint32_t resultlen, UniverseID holomapid, size_t cp_idx);
    using GetModuleRecycledResources = uint32_t (*)(UIWareInfo* result, uint32_t resultlen, UniverseID moduleid);
    using GetMoonInfo = uint32_t (*)(UICelestialBodyInfo* result, uint32_t resultlen, UniverseID clusterid, uint32_t planetidx);
    using GetMouseHUDModeOption = uint32_t (*)();
    using GetNPCAccountStatistics = uint32_t (*)(UIAccountStatData* result, size_t resultlen, UniverseID entityid, double starttime, double endtime);
    using GetNotificationTypes = uint32_t (*)(UINotificationType* result, uint32_t resultlen);
    using GetNumAllBlacklists = uint32_t (*)();
    using GetNumAllBoardingBehaviours = uint32_t (*)();
    using GetNumAllBoardingPhases = uint32_t (*)();
    using GetNumAllControlPosts = uint32_t (*)();
    using GetNumAllCountermeasures = uint32_t (*)(UniverseID defensibleid);
    using GetNumAllEquipment = uint32_t (*)(bool playerblueprint);
    using GetNumAllEquipmentModProperties = uint32_t (*)(const char* equipmentmodclass);
    using GetNumAllFactionShips = uint32_t (*)(const char* factionid);
    using GetNumAllFactionStations = uint32_t (*)(const char* factionid);
    using GetNumAllFactions = uint32_t (*)(bool includehidden);
    using GetNumAllInventoryBombs = uint32_t (*)(UniverseID entityid);
    using GetNumAllLaserTowers = uint32_t (*)(UniverseID defensibleid);
    using GetNumAllMines = uint32_t (*)(UniverseID defensibleid);
    using GetNumAllMissiles = uint32_t (*)(UniverseID defensibleid);
    using GetNumAllModuleSets = uint32_t (*)();
    using GetNumAllNavBeacons = uint32_t (*)(UniverseID defensibleid);
    using GetNumAllRaces = uint32_t (*)();
    using GetNumAllResourceProbes = uint32_t (*)(UniverseID defensibleid);
    using GetNumAllResponsesToSignal = uint32_t (*)(const char* signalid);
    using GetNumAllRoles = uint32_t (*)();
    using GetNumAllSatellites = uint32_t (*)(UniverseID defensibleid);
    using GetNumAllShipMacros = uint32_t (*)(bool playerblueprint);
    using GetNumAllSignals = uint32_t (*)();
    using GetNumAllUnits = uint32_t (*)(UniverseID defensibleid, bool onlydrones);
    using GetNumAllowedWeaponSystems = uint32_t (*)();
    using GetNumAmmoStorage = uint32_t (*)(UniverseID defensibleid, const char* ammotype);
    using GetNumAssignedConstructionVessels = uint32_t (*)(UniverseID containerid);
    using GetNumAttackersOfBoardingOperation = uint32_t (*)(UniverseID defensibletargetid, const char* boarderfactionid);
    using GetNumAvailableClothingThemes = uint32_t (*)();
    using GetNumAvailableEquipment = uint32_t (*)(UniverseID containerid, const char* classid);
    using GetNumAvailableEquipmentMods = uint32_t (*)();
    using GetNumAvailableLockboxes = uint32_t (*)(UniverseID entityid);
    using GetNumAvailablePaintThemes = uint32_t (*)();
    using GetNumBlueprints = uint32_t (*)(const char* set, const char* category, const char* macroname);
    using GetNumBoardingMarinesFromOperation = uint32_t (*)(UniverseID defensibletargetid, const char* boarderfactionid);
    using GetNumBuildModules = uint32_t (*)(UniverseID containerid);
    using GetNumBuildTasks = uint32_t (*)(UniverseID containerid, UniverseID buildmoduleid, bool isinprogress, bool includeupgrade);
    using GetNumCargo = uint32_t (*)(UniverseID containerid, const char* tags);
    using GetNumCargoStatistics = uint32_t (*)(UniverseID containerorspaceid, double starttime, double endtime, size_t numdatapoints);
    using GetNumCargoTransportTypes = uint32_t (*)(UniverseID containerid, bool merge);
    using GetNumCloseOnUnhandledClickFrames = uint32_t (*)();
    using GetNumCompSlotPlayerActions = uint32_t (*)(UIComponentSlot compslot);
    using GetNumConstructionMapVenturePlatformDocks = uint32_t (*)(UniverseID holomapid, size_t ventureplatformidx);
    using GetNumConstructionPlans = uint32_t (*)();
    using GetNumContainedKnownSpaces = uint32_t (*)(UniverseID spaceid);
    using GetNumContainedKnownUnreadSpaces = uint32_t (*)(UniverseID spaceid);
    using GetNumContainerAllowedBuildFactions = uint32_t (*)(UniverseID containerid);
    using GetNumContainerBuildResources = uint32_t (*)(UniverseID containerid);
    using GetNumContainerBuilderMacros = uint32_t (*)(UniverseID containerid);
    using GetNumContainerStockLimitOverrides = uint32_t (*)(UniverseID containerid);
    using GetNumContainerWareReservations = uint32_t (*)(UniverseID containerid);
    using GetNumCountermeasures = uint32_t (*)();
    using GetNumCurrentMissionOffers = uint32_t (*)(bool showninbbs);
    using GetNumDockedShips = uint32_t (*)(UniverseID dockingbayorcontainerid, const char* factionid);
    using GetNumDroneModes = uint32_t (*)(UniverseID defensibleid, const char* dronetype);
    using GetNumDropDownOptions = uint32_t (*)(const int dropdownid);
    using GetNumFormationShapes = uint32_t (*)();
    using GetNumGraphDataRecords = uint32_t (*)(int graphid);
    using GetNumGraphIcons = uint32_t (*)(int graphid);
    using GetNumHQs = uint32_t (*)(const char* factionid);
    using GetNumIllegalToFactions = uint32_t (*)(const char* wareid);
    using GetNumInventoryPaintMods = uint32_t (*)();
    using GetNumLanguages = uint32_t (*)();
    using GetNumLibraryEntryAliases = uint32_t (*)(const char* librarytypeid, const char* id);
    using GetNumLoadoutsInfo = uint32_t (*)(UniverseID componentid, const char* macroname);
    using GetNumMapComponentMissions = uint32_t (*)(UniverseID holomapid, UniverseID componentid);
    using GetNumMapRenderedComponents = uint32_t (*)(UniverseID holomapid);
    using GetNumMapSelectedComponents = uint32_t (*)(UniverseID holomapid);
    using GetNumMaxProductionStorage = uint32_t (*)(UniverseID containerid);
    using GetNumMessages = uint32_t (*)(const char* categoryname, bool unknownBool);
    using GetNumMineablesAtSectorPos = uint32_t (*)(UniverseID sectorid, Coord3D position);
    using GetNumMissileCargo = uint32_t (*)(UniverseID containerid);
    using GetNumMissingBuildResources2 = uint32_t (*)(UniverseID containerid, UIBuildOrderList* orders, uint32_t numorders, bool playercase);
    using GetNumMissingLoadoutResources2 = uint32_t (*)(UniverseID containerid, UIBuildOrderList* orders, uint32_t numorders, bool playercase);
    using GetNumMissionThreadSubMissions = uint32_t (*)(MissionID missionid);
    using GetNumModuleNeededResources = uint32_t (*)(UniverseID holomapid, size_t cp_idx);
    using GetNumModuleRecycledResources = uint32_t (*)(UniverseID moduleid);
    using GetNumNotificationTypes = uint32_t (*)();
    using GetNumObjectsWithSyncPoint = uint32_t (*)(uint32_t syncid, bool onlyreached);
    using GetNumOrderDefinitions = uint32_t (*)();
    using GetNumOrders = uint32_t (*)(UniverseID controllableid);
    using GetNumPeopleAfterOrders = uint32_t (*)(UniverseID controllableid, int32_t numorders);
    using GetNumPersonSuitableControlPosts = uint32_t (*)(UniverseID controllableid, UniverseID personcontrollableid, NPCSeed person, bool free);
    using GetNumPlannedLimitedModules = uint32_t (*)(const char* constructionplanid);
    using GetNumPlayerAlertSounds = uint32_t (*)();
    using GetNumPlayerAlerts = uint32_t (*)();
    using GetNumPlayerLogos = uint32_t (*)(bool includestandard, bool includecustom);
    using GetNumPlayerShipBuildTasks = uint32_t (*)(bool isinprogress, bool includeupgrade);
    using GetNumRemovedConstructionPlanModules2 = uint32_t (*)(UniverseID holomapid, UniverseID defensibleid, uint32_t* newIndex, bool usestoredplan, uint32_t* numChangedIndices, bool checkupgrades);
    using GetNumRemovedStationModules = uint32_t (*)(UniverseID defensibleid, uint32_t* newIndex);
    using GetNumRepairResources = uint32_t (*)(UniverseID componenttorepairid);
    using GetNumResearchModules = uint32_t (*)(UniverseID containerid);
    using GetNumSectorsByOwner = uint32_t (*)(const char* factionid);
    using GetNumShieldGroups = uint32_t (*)(UniverseID defensibleid);
    using GetNumSkills = uint32_t (*)();
    using GetNumSoftwarePredecessors = uint32_t (*)(const char* softwarename);
    using GetNumSoftwareSlots = uint32_t (*)(UniverseID controllableid, const char* macroname);
    using GetNumSoundDevices = uint32_t (*)();
    using GetNumStationModules = uint32_t (*)(UniverseID stationid, bool includeconstructions, bool includewrecks);
    using GetNumStationOverviewGraphWares = uint32_t (*)(UniverseID stationid, bool* initialized);
    using GetNumStoredUnits = uint32_t (*)(UniverseID defensibleid, const char* cat, bool virtualammo);
    using GetNumSubComponents = uint32_t (*)(UniverseID containerid);
    using GetNumSuitableBuildProcessors = uint32_t (*)(UniverseID containerid, UniverseID objectid, const char* macroname);
    using GetNumSuitableControlPosts = uint32_t (*)(UniverseID controllableid, UniverseID entityid, bool free);
    using GetNumSupplyOrders = uint32_t (*)(UniverseID containerid, bool defaultorders);
    using GetNumTableInitialMultiselectedRows = uint32_t (*)(const int tableid);
    using GetNumTiersOfRole = uint32_t (*)(const char* role);
    using GetNumTimeline = uint32_t (*)();
    using GetNumTradeOfferStatistics = uint32_t (*)(UniverseID containerorspaceid, double starttime, double endtime, size_t numdatapoints);
    using GetNumUnavailableUnits = uint32_t (*)(UniverseID defensibleid, const char* cat);
    using GetNumUnitCargo = uint32_t (*)(UniverseID containerid, bool onlydrones);
    using GetNumUnreadLibraryEntries = uint32_t (*)(const char* libraryid);
    using GetNumUpgradeGroups = uint32_t (*)(UniverseID destructibleid, const char* macroname);
    using GetNumUsedLimitedModules = uint32_t (*)(UniverseID excludedstationid);
    using GetNumUsedLimitedModulesFromSubsequence = uint32_t (*)(UniverseID holomapid, size_t cp_idx);
    using GetNumValidTransporterTargets = uint32_t (*)(UniverseID componentid);
    using GetNumVenturePlatformDocks = uint32_t (*)(UniverseID ventureplatformid);
    using GetNumVenturePlatforms = uint32_t (*)(UniverseID defensibleid);
    using GetNumWareBlueprintOwners = uint32_t (*)(const char* wareid);
    using GetNumWareSources = uint32_t (*)(const char* wareid);
    using GetNumWares = uint32_t (*)(const char* tags, bool research, const char* licenceownerid, const char* exclusiontags);
    using GetNumWeaponGroupsByWeapon = uint32_t (*)(UniverseID defensibleid, UniverseID weaponid);
    using GetOrderDefinitions = uint32_t (*)(OrderDefinition* result, uint32_t resultlen);
    using GetOrders = uint32_t (*)(Order* result, uint32_t resultlen, UniverseID controllableid);
    using GetOrders2 = uint32_t (*)(Order2* result, uint32_t resultlen, UniverseID controllableid);
    using GetPeople = uint32_t (*)(PeopleInfo* result, uint32_t resultlen, UniverseID controllableid);
    using GetPeopleAfterOrders = uint32_t (*)(NPCInfo* result, uint32_t resultlen, UniverseID controllableid, int32_t numorders);
    using GetPeopleCapacity = uint32_t (*)(UniverseID controllableid, const char* macroname, bool includecrew);
    using GetPersonSkills = uint32_t (*)(Skill* result, NPCSeed person, UniverseID controllableid);
    using GetPersonSkillsForAssignment = uint32_t (*)(Skill2* result, NPCSeed person, UniverseID controllableid, const char* role, const char* postid);
    using GetPersonSuitableControlPosts = uint32_t (*)(ControlPostInfo* result, uint32_t resultlen, UniverseID controllableid, UniverseID personcontrollableid, NPCSeed person, bool free);
    using GetPlannedLimitedModules = uint32_t (*)(UIMacroCount* result, uint32_t resultlen, const char* constructionplanid);
    using GetPlayerAlertSounds = uint32_t (*)(SoundInfo* result, uint32_t resultlen);
    using GetPlayerAlerts = uint32_t (*)(PlayerAlertInfo* result, uint32_t resultlen);
    using GetPlayerLogos = uint32_t (*)(UILogo* result, uint32_t resultlen, bool includestandard, bool includecustom);
    using GetPlayerShipBuildTasks = uint32_t (*)(BuildTaskInfo* result, uint32_t resultlen, bool isinprogress, bool includeupgrade);
    using GetPurchasableCargo = uint32_t (*)(UniverseID containerid, const char* unknownString);
    using GetRemovedConstructionPlanModules2 = uint32_t (*)(UniverseID* result, uint32_t resultlen, uint32_t* changedIndices, uint32_t* numChangedIndices);
    using GetRemovedStationModules = uint32_t (*)(UniverseID* result, uint32_t resultlen);
    using GetRenderTargetAlpha = uint32_t (*)(const int rendertargetid);
    using GetRepairResources = uint32_t (*)(UIWareInfo* result, uint32_t resultlen, UniverseID componenttorepairid);
    using GetResearchModules = uint32_t (*)(UniverseID* result, uint32_t resultlen, UniverseID containerid);
    using GetRoleTierNPCs = uint32_t (*)(NPCSeed* result, uint32_t resultlen, UniverseID controllableid, const char* role, int32_t skilllevel);
    using GetRoleTiers = uint32_t (*)(RoleTierData* result, uint32_t resultlen, UniverseID controllableid, const char* role);
    using GetSectorsByOwner = uint32_t (*)(UniverseID* result, uint32_t resultlen, const char* factionid);
    using GetShieldGroups = uint32_t (*)(ShieldGroup* result, uint32_t resultlen, UniverseID defensibleid);
    using GetSoftwarePredecessors = uint32_t (*)(const char** result, uint32_t resultlen, const char* softwarename);
    using GetSoftwareSlots = uint32_t (*)(SoftwareSlot* result, uint32_t resultlen, UniverseID controllableid, const char* macroname);
    using GetSoundDevices = uint32_t (*)(const char** result, uint32_t resultlen);
    using GetStandardButtonOffsetX = uint32_t (*)(const int frameid);
    using GetStandardButtonOffsetY = uint32_t (*)(const int frameid);
    using GetStationModules = uint32_t (*)(UniverseID* result, uint32_t resultlen, UniverseID stationid, bool includeconstructions, bool includewrecks);
    using GetStationOverviewGraphWares = uint32_t (*)(const char** result, uint32_t resultlen, UniverseID stationid);
    using GetSuitableControlPosts = uint32_t (*)(ControlPostInfo* result, uint32_t resultlen, UniverseID controllableid, UniverseID entityid, bool free);
    using GetSupplyOrders = uint32_t (*)(SupplyOverride* result, uint32_t resultlen, UniverseID containerid, bool defaultorders);
    using GetTableHighlightMode = uint32_t (*)(const int tableid);
    using GetTableInitialMultiselectedRows = uint32_t (*)(uint32_t* result, uint32_t resultlen, const int tableid);
    using GetTiersOfRole = uint32_t (*)(RoleTierData* result, uint32_t resultlen, const char* role);
    using GetTimeline = uint32_t (*)(TimelineInfo* result, uint32_t resultlen);
    using GetTradeOfferStatistics = uint32_t (*)(UITradeOfferStat* result, uint32_t resultlen, size_t numdatapoints);
    using GetUnitCargo = uint32_t (*)(UIWareInfo* result, uint32_t resultlen, UniverseID containerid, bool onlydrones);
    using GetUpgradeGroups = uint32_t (*)(UpgradeGroup* result, uint32_t resultlen, UniverseID destructibleid, const char* macroname);
    using GetUpgradeGroups2 = uint32_t (*)(UpgradeGroup2* result, uint32_t resultlen, UniverseID destructibleid, const char* macroname);
    using GetUsedLimitedModules = uint32_t (*)(UIMacroCount* result, uint32_t resultlen, UniverseID excludedstationid);
    using GetUsedLimitedModulesFromSubsequence = uint32_t (*)(UIMacroCount* result, uint32_t resultlen, UniverseID holomapid, size_t cp_idx);
    using GetValidTransporterTargets = uint32_t (*)(UIComponentSlot* result, uint32_t resultlen, UniverseID componentid);
    using GetVenturePlatformDocks = uint32_t (*)(UniverseID* result, uint32_t resultlen, UniverseID ventureplatformid);
    using GetVenturePlatforms = uint32_t (*)(UniverseID* result, uint32_t resultlen, UniverseID defensibleid);
    using GetWareBlueprintOwners = uint32_t (*)(const char** result, uint32_t resultlen, const char* wareid);
    using GetWareSources = uint32_t (*)(WareSource* result, uint32_t resultlen, const char* wareid);
    using GetWares = uint32_t (*)(const char** result, uint32_t resultlen, const char* tags, bool research, const char* licenceownerid, const char* exclusiontags);
    using GetWeaponGroupsByWeapon = uint32_t (*)(UIWeaponGroup* result, uint32_t resultlen, UniverseID defensibleid, UniverseID weaponid);
    using PlayDetailmonitorCutscene = uint32_t (*)(uint32_t cutsceneid, const char* rendertarget);
    using PrepareBuildSequenceResources = uint32_t (*)(UniverseID holomapid, UniverseID stationid);
    using GetActiveMissionID = uint64_t (*)();
    using AbortMission = void (*)(MissionID missionid);
    using AddCopyToConstructionMap = void (*)(UniverseID holomapid, size_t cp_idx, bool copysequence);
    using AddCrewExchangeOrder = void (*)(UniverseID containerid, UniverseID partnercontainerid, NPCSeed* npcs, uint32_t numnpcs, NPCSeed* partnernpcs, uint32_t numpartnernpcs, bool tradecomputer);
    using AddMacroToConstructionMap = void (*)(UniverseID holomapid, const char* macroname, bool startdragging);
    using AddPlayerMoney = void (*)(int64_t money);
    using AddResearch = void (*)(const char* wareid);
    using AddSimilarMapComponentsToSelection = void (*)(UniverseID holomapid, UniverseID componentid);
    using ChangeMapBuildPlot = void (*)(UniverseID holomapid, float x, float y, float z);
    using CheatDockingTraffic = void (*)();
    using ClearBuildMapSelection = void (*)(UniverseID holomapid);
    using ClearContainerBuyLimitOverride = void (*)(UniverseID containerid, const char* wareid);
    using ClearContainerSellLimitOverride = void (*)(UniverseID containerid, const char* wareid);
    using ClearErrorLog = void (*)();
    using ClearMapBehaviour = void (*)(UniverseID holomapid);
    using ClearMapBuildPlot = void (*)(UniverseID holomapid);
    using ClearMapTradeFilterByMinTotalVolume = void (*)(UniverseID holomapid);
    using ClearMapTradeFilterByPlayerOffer = void (*)(UniverseID holomapid, bool buysellswitch);
    using ClearMapTradeFilterByWare = void (*)(UniverseID holomapid);
    using ClearProductionItems = void (*)(UniverseID productionmoduleid);
    using ClearRendertarget = void (*)(const char* rendertarget);
    using ClearSelectedMapComponents = void (*)(UniverseID holomapid);
    using ClearSelectedMapMacroSlots = void (*)(UniverseID holomapid);
    using ClearTrackedMenus = void (*)();
    using ConnectToMultiplayerGame = void (*)(const char* serverip);
    using CycleNextDroneMode = void (*)(uint32_t dronetype);
    using CycleTurretMissile = void (*)(size_t turretnum);
    using CycleTurretMode = void (*)(size_t turretnum);
    using DeactivateDirectInput = void (*)();
    using DeactivateMouseEmulation = void (*)();
    using DeselectMacroForConstructionMap = void (*)(UniverseID holomapid);
    using DisableAsserts = void (*)();
    using DisableAutoMouseEmulation = void (*)();
    using DisableEncryptedDirectInputMode = void (*)();
    using DisableOptionalAsserts = void (*)();
    using DismantleEngineMod = void (*)(UniverseID objectid);
    using DismantleGroupedWeaponMod = void (*)(UniverseID defensibleid, UniverseID contextid, const char* group);
    using DismantleShieldMod = void (*)(UniverseID defensibleid, UniverseID contextid, const char* group);
    using DismantleShipMod = void (*)(UniverseID shipid);
    using DismantleWeaponMod = void (*)(UniverseID weaponid);
    using EnableAllCheats = void (*)();
    using EnableAsserts = void (*)();
    using EnableAutoMouseEmulation = void (*)();
    using EnableEncryptedDirectInputMode = void (*)();
    using EnableOptionalAsserts = void (*)();
    using EndGuidance = void (*)();
    using FadeScreen = void (*)(float fadeouttime, float fadeintime);
    using GenerateModuleLoadout = void (*)(UILoadout* result, UniverseID holomapid, size_t cp_idx, UniverseID defensibleid, float level);
    using GenerateModuleLoadoutCounts = void (*)(UILoadoutCounts* result, UniverseID holomapid, size_t cp_idx, UniverseID defensibleid, float level);
    using GenerateShipKnownLoadout = void (*)(UILoadout* result, const char* macroname, float level);
    using GenerateShipKnownLoadoutCounts = void (*)(UILoadoutCounts* result, const char* macroname, float level);
    using GenerateShipLoadout = void (*)(UILoadout* result, UniverseID containerid, UniverseID shipid, const char* macroname, float level);
    using GenerateShipLoadoutCounts = void (*)(UILoadoutCounts* result, UniverseID containerid, UniverseID shipid, const char* macroname, float level);
    using GetBuildTaskCrewTransferInfo = void (*)(CrewTransferInfo* result, UniverseID containerid, BuildTaskID id);
    using GetConstructionMapItemLoadout = void (*)(UILoadout* result, UniverseID holomapid, size_t itemidx, UniverseID defensibleid);
    using GetConstructionMapItemLoadoutCounts = void (*)(UILoadoutCounts* result, UniverseID holomapid, size_t itemidx, UniverseID defensibleid);
    using GetCurrentLoadout = void (*)(UILoadout* result, UniverseID defensibleid, UniverseID moduleid);
    using GetCurrentLoadoutCounts = void (*)(UILoadoutCounts* result, UniverseID defensibleid, UniverseID moduleid);
    using GetCustomGameStartLoadoutProperty = void (*)(UILoadout* result, const char* id, const char* propertyid);
    using GetCustomGameStartLoadoutPropertyCounts = void (*)(UILoadoutCounts* result, const char* id, const char* propertyid);
    using GetLoadout = void (*)(UILoadout* result, UniverseID defensibleid, const char* macroname, const char* loadoutid);
    using GetMapState = void (*)(UniverseID holomapid, HoloMapState* state);
    using InvalidateRadarCursorPosition = void (*)();
    using LaunchLaserTower = void (*)(UniverseID defensibleid, const char* lasertowermacroname);
    using LaunchMine = void (*)(UniverseID defensibleid, const char* minemacroname);
    using LaunchNavBeacon = void (*)(UniverseID defensibleid, const char* navbeaconmacroname);
    using LaunchResourceProbe = void (*)(UniverseID defensibleid, const char* resourceprobemacroname);
    using LaunchSatellite = void (*)(UniverseID defensibleid, const char* satellitemacroname);
    using LearnBlueprint = void (*)(const char* wareid);
    using MakePlayerOwnerOf = void (*)(UniverseID objectid);
    using MovePlayerToSectorPos = void (*)(UniverseID sectorid, UIPosRot position);
    using MutePlayerAlert = void (*)(size_t index);
    using NewMultiplayerGame = void (*)(const char* modulename, const char* difficulty);
    using NotifyDisplayNotification = void (*)(const int notificationid);
    using NotifyErrorLogDispatching = void (*)();
    using NotifyErrorLogDispatchingDone = void (*)();
    using NotifyInteractMenuHidden = void (*)(const uint32_t id, const bool allclosed);
    using NotifyInteractMenuShown = void (*)(const uint32_t id);
    using OpenMovieMenu = void (*)(const char* key);
    using OpenWebBrowser = void (*)(const char* url);
    using PayBuildPlotSize = void (*)(UniverseID stationid, Coord3D plotsize, Coord3D plotcenter);
    using ReadAllInventoryWares = void (*)();
    using ReadInventoryWare = void (*)(const char* wareid);
    using ReadKnownItem = void (*)(const char* libraryid, const char* itemid, bool read);
    using ReassignPeople = void (*)(UniverseID controllableid, CrewTransferContainer* reassignedcrew, uint32_t amount);
    using RedoConstructionMapChange = void (*)(UniverseID holomapid);
    using ReenableErrorLog = void (*)();
    using ReleaseConstructionMapState = void (*)();
    using ReleaseInteractionDescriptor = void (*)(int32_t id);
    using ReleaseOrderSyncPoint = void (*)(uint32_t syncid);
    using ReleasePersonFromCrewTransfer = void (*)(UniverseID controllableid, NPCSeed person);
    using ReloadSaveList = void (*)();
    using RemoveBlacklist = void (*)(BlacklistID id);
    using RemoveDockingBayReservation = void (*)(UniverseID dockingbayid);
    using RemoveFill = void (*)(const UniverseID componentid, const char*const connectionname);
    using RemoveHoloMap = void (*)();
    using RemoveItemFromConstructionMap = void (*)(UniverseID holomapid, size_t itemidx);
    using RemoveOrderSyncPointID = void (*)(UniverseID controllableid, size_t orderidx);
    using RemoveOutline = void (*)(const UniverseID componentid, const char*const connectionname);
    using RemovePerson = void (*)(UniverseID controllableid, NPCSeed person);
    using RemovePlannedDefaultOrder = void (*)(UniverseID controllableid);
    using RemovePlayerAlert = void (*)(size_t index);
    using RemoveReadMessages = void (*)(const char* categoryname);
    using RemoveTrackedMenu = void (*)(const char* menu);
    using RemoveTradeWare = void (*)(UniverseID containerid, const char* wareid);
    using RequestLanguageChange = void (*)(int32_t id);
    using RequestSoundDeviceSwitch = void (*)(const char* device);
    using ResetCustomGameStart = void (*)(const char* id);
    using ResetEncryptedDirectInputData = void (*)();
    using ResetMapPlayerRotation = void (*)(UniverseID holomapid);
    using RestoreMiscOptions = void (*)();
    using RevealEncyclopedia = void (*)();
    using RevealMap = void (*)();
    using RevealStations = void (*)();
    using SaveAAOption = void (*)();
    using SaveLoadout = void (*)(const char* macroname, UILoadout uiloadout, const char* source, const char* id, bool overwrite, const char* name, const char* desc);
    using SaveMapConstructionPlan = void (*)(UniverseID holomapid, const char* source, const char* id, bool overwrite, const char* name, const char* desc);
    using SelectBuildMapEntry = void (*)(UniverseID holomapid, size_t cp_idx);
    using SelectPickedBuildMapEntry = void (*)(UniverseID holomapid);
    using SelectSimilarMapComponents = void (*)(UniverseID holomapid, UniverseID componentid);
    using SellPlayerShip = void (*)(UniverseID shipid, UniverseID shipyardid);
    using SetAAOption = void (*)(const char* fxaa);
    using SetAdaptiveSamplingOption = void (*)(float value);
    using SetAllMissileTurretModes = void (*)(UniverseID defensibleid, const char* mode);
    using SetAllMissileTurretsArmed = void (*)(UniverseID defensibleid, bool arm);
    using SetAllNonMissileTurretModes = void (*)(UniverseID defensibleid, const char* mode);
    using SetAllNonMissileTurretsArmed = void (*)(UniverseID defensibleid, bool arm);
    using SetAllTurretModes = void (*)(UniverseID defensibleid, const char* mode);
    using SetAllTurretsArmed = void (*)(UniverseID defensibleid, bool arm);
    using SetAllowedWeaponSystems = void (*)(UniverseID defensibleid, size_t orderidx, bool usedefault, WeaponSystemInfo* uiweaponsysteminfo, uint32_t numuiweaponsysteminfo);
    using SetAutoRoll = void (*)(bool value);
    using SetAutosaveIntervalOption = void (*)(float factor);
    using SetBoxText = void (*)(const int boxtextid, const char* text);
    using SetBoxTextBoxColor = void (*)(const int boxtextid, Color color);
    using SetBoxTextColor = void (*)(const int boxtextid, Color color);
    using SetButtonActive = void (*)(const int buttonid, bool active);
    using SetButtonHighlightColor = void (*)(const int buttonid, Color color);
    using SetButtonIcon2ID = void (*)(const int buttonid, const char* iconid);
    using SetButtonIconID = void (*)(const int buttonid, const char* iconid);
    using SetButtonText2 = void (*)(const int buttonid, const char* text);
    using SetButtonText2Color = void (*)(const int buttonid, Color color);
    using SetButtonTextColor = void (*)(const int buttonid, Color color);
    using SetCheckBoxChecked2 = void (*)(const int checkboxid, bool checked, bool update);
    using SetCheckBoxColor = void (*)(const int checkboxid, Color color);
    using SetChromaticAberrationOption = void (*)(bool value);
    using SetCockpitCameraScaleOption = void (*)(float value);
    using SetConfigSetting = void (*)(const char*const setting, const bool value);
    using SetConstructionSequenceFromConstructionMap = void (*)(UniverseID containerid, UniverseID holomapid);
    using SetContainerBuildAllowedFactions = void (*)(UniverseID containerid, const char** uifactions, uint32_t numuifactions);
    using SetContainerBuildPriceFactor = void (*)(UniverseID containerid, float value);
    using SetContainerBuyLimitOverride = void (*)(UniverseID containerid, const char* wareid, int32_t amount);
    using SetContainerFactionBuildRescricted = void (*)(UniverseID containerid, bool value);
    using SetContainerGlobalPriceFactor = void (*)(UniverseID containerid, float value);
    using SetContainerSellLimitOverride = void (*)(UniverseID containerid, const char* wareid, int32_t amount);
    using SetContainerWareIsBuyable = void (*)(UniverseID containerid, const char* wareid, bool allowed);
    using SetContainerWareIsSellable = void (*)(UniverseID containerid, const char* wareid, bool allowed);
    using SetControllableBlacklist = void (*)(UniverseID controllableid, BlacklistID id, const char* listtype, bool value);
    using SetCrosshairMessage = void (*)(const uint32_t messageid);
    using SetCustomGameStartBlueprintProperty = void (*)(const char* id, const char* propertyid, CustomGameStartBlueprint* uivalue, uint32_t uivaluecount);
    using SetCustomGameStartBoolProperty = void (*)(const char* id, const char* propertyid, bool uivalue);
    using SetCustomGameStartEncyclopediaProperty = void (*)(const char* id, const char* propertyid, CustomGameStartEncyclopediaEntry* uivalue, uint32_t uivaluecount);
    using SetCustomGameStartInventoryProperty = void (*)(const char* id, const char* propertyid, CustomGameStartInventory* uivalue, uint32_t uivaluecount);
    using SetCustomGameStartMoneyProperty = void (*)(const char* id, const char* propertyid, int64_t uivalue);
    using SetCustomGameStartPosRotProperty = void (*)(const char* id, const char* propertyid, UIPosRot uivalue);
    using SetCustomGameStartRelationsProperty = void (*)(const char* id, const char* propertyid, CustomGameStartRelationInfo* uivalue, uint32_t uivaluecount);
    using SetCustomGameStartResearchProperty = void (*)(const char* id, const char* propertyid, const char** uivalue, uint32_t uivaluecount);
    using SetCustomGameStartShipAndLoadoutProperty = void (*)(const char* id, const char* shippropertyid, const char* loadoutpropertyid, const char* macroname, UILoadout uiloadout);
    using SetCustomGameStartStringProperty = void (*)(const char* id, const char* propertyid, const char* uivalue);
    using SetDefensibleActiveWeaponGroup = void (*)(UniverseID defensibleid, bool primary, uint32_t groupidx);
    using SetDefensibleLoadoutLevel = void (*)(UniverseID defensibleid, float value);
    using SetDockingBayReservation = void (*)(UniverseID dockingbayid, double duration);
    using SetDroneMode = void (*)(UniverseID defensibleid, const char* dronetype, const char* mode);
    using SetDroneTypeArmed = void (*)(UniverseID defensibleid, const char* dronetype, bool arm);
    using SetDropDownCurOption = void (*)(const int dropdownid, const char* id);
    using SetEditBoxActive = void (*)(const int editboxid, bool active);
    using SetEditBoxText = void (*)(const int editboxid, const char* text);
    using SetFill = void (*)(const UniverseID componentid, const char*const connectionname, const uint8_t red, const uint8_t green, const uint8_t blue, const float alpha, const bool animated, const float minalpha, const float maxalpha, const float transitiontime);
    using SetFleetName = void (*)(UniverseID controllableid, const char* fleetname);
    using SetFlowChartEdgeColor = void (*)(const int flowchartedgeid, Color color);
    using SetFlowChartNodeCaptionText = void (*)(const int flowchartnodeid, const char* text);
    using SetFlowChartNodeCaptionTextColor = void (*)(const int flowchartnodeid, Color color);
    using SetFlowChartNodeCurValue = void (*)(const int flowchartnodeid, double value);
    using SetFlowChartNodeMaxValue = void (*)(const int flowchartnodeid, double value);
    using SetFlowChartNodeOutlineColor = void (*)(const int flowchartnodeid, Color color);
    using SetFlowChartNodeSlider1Value = void (*)(const int flowchartnodeid, double value);
    using SetFlowChartNodeSlider2Value = void (*)(const int flowchartnodeid, double value);
    using SetFlowChartNodeSliderStep = void (*)(const int flowchartnodeid, double step);
    using SetFlowChartNodeStatusBgIcon = void (*)(const int flowchartnodeid, const char* iconid);
    using SetFlowChartNodeStatusColor = void (*)(const int flowchartnodeid, Color color);
    using SetFlowChartNodeStatusIcon = void (*)(const int flowchartnodeid, const char* iconid);
    using SetFlowChartNodeStatusText = void (*)(const int flowchartnodeid, const char* text);
    using SetFlowchartNodeExpanded = void (*)(const int flowchartnodeid, const int frameid, bool expandedabove);
    using SetFocusMapComponent = void (*)(UniverseID holomapid, UniverseID componentid, bool resetplayerpan);
    using SetForceShootingAtCursorOption = void (*)(bool value);
    using SetGroupAndAssignment = void (*)(UniverseID controllableid, int group, const char* assignment);
    using SetGuidance = void (*)(UniverseID componentid, UIPosRot offset);
    using SetHUDRadarActive = void (*)(bool setting);
    using SetHUDRadarSeparate = void (*)(bool setting);
    using SetIcon = void (*)(const int widgeticonid, const char* iconid);
    using SetIconColor = void (*)(const int widgeticonid, Color color);
    using SetIconText = void (*)(const int widgeticonid, const char* text);
    using SetIconText2 = void (*)(const int widgeticonid, const char* text);
    using SetInversionSetting = void (*)(uint32_t uirangeid, const char* parametername, bool value);
    using SetJoystickSteeringAdapative = void (*)(bool value);
    using SetKnownRead = void (*)(UniverseID componentid, bool read);
    using SetLUTMode = void (*)(uint32_t mode);
    using SetMacroMapLocalLinearHighways = void (*)(UniverseID holomapid, bool value);
    using SetMacroMapLocalRingHighways = void (*)(UniverseID holomapid, bool value);
    using SetMacroMapPlayerSectorOffset = void (*)(UniverseID holomapid, const char* macroname, UIPosRot offset, bool focuscamera);
    using SetMapAlertFilter = void (*)(UniverseID holomapid, uint32_t alertlevel);
    using SetMapFactionRelationColorOption = void (*)(UniverseID holomapid, bool value);
    using SetMapFilterString = void (*)(UniverseID holomapid, uint32_t numtexts, const char** textarray);
    using SetMapPaintMod = void (*)(UniverseID holomapid, const char* wareid);
    using SetMapPanOffset = void (*)(UniverseID holomapid, UniverseID offsetcomponentid);
    using SetMapPicking = void (*)(UniverseID holomapid, bool enable);
    using SetMapRelativeMousePosition = void (*)(UniverseID holomapid, bool valid, float x, float y);
    using SetMapRenderAllAllyOrderQueues = void (*)(UniverseID holomapid, bool value);
    using SetMapRenderAllOrderQueues = void (*)(UniverseID holomapid, bool value);
    using SetMapRenderCargoContents = void (*)(UniverseID holomapid, bool value);
    using SetMapRenderCivilianShips = void (*)(UniverseID holomapid, bool value);
    using SetMapRenderCrewInfo = void (*)(UniverseID holomapid, bool value);
    using SetMapRenderDockedShipInfos = void (*)(UniverseID holomapid, bool value);
    using SetMapRenderEclipticLines = void (*)(UniverseID holomapid, bool value);
    using SetMapRenderMissionGuidance = void (*)(UniverseID holomapid, MissionID missionid);
    using SetMapRenderMissionOffers = void (*)(UniverseID holomapid, bool value);
    using SetMapRenderResourceInfo = void (*)(UniverseID holomapid, bool value);
    using SetMapRenderSelectionLines = void (*)(UniverseID holomapid, bool value);
    using SetMapRenderTradeOffers = void (*)(UniverseID holomapid, bool value);
    using SetMapRenderWorkForceInfo = void (*)(UniverseID holomapid, bool value);
    using SetMapRenderWrecks = void (*)(UniverseID holomapid, bool value);
    using SetMapState = void (*)(UniverseID holomapid, HoloMapState state);
    using SetMapStationInfoBoxMargin = void (*)(UniverseID holomapid, const char* margin, uint32_t width);
    using SetMapTargetDistance = void (*)(UniverseID holomapid, float distance);
    using SetMapTopTradesCount = void (*)(UniverseID holomapid, uint32_t count);
    using SetMapTradeFilterByMaxPrice = void (*)(UniverseID holomapid, int64_t price);
    using SetMapTradeFilterByMinTotalVolume = void (*)(UniverseID holomapid, uint32_t minvolume);
    using SetMapTradeFilterByPlayerOffer = void (*)(UniverseID holomapid, bool buysellswitch, bool enable);
    using SetMapTradeFilterByWare = void (*)(UniverseID holomapid, const char** wareids, uint32_t numwareids);
    using SetMapTradeFilterByWareTransport = void (*)(UniverseID holomapid, const char** transporttypes, uint32_t numtransporttypes);
    using SetMessageRead = void (*)(MessageID messageid, const char* categoryname);
    using SetMouseCursorPosition = void (*)(const int32_t posx, const int32_t posy);
    using SetMouseHUDModeOption = void (*)(uint32_t value);
    using SetMouseOverTextOption = void (*)(bool value);
    using SetMouseSteeringAdapative = void (*)(bool value);
    using SetMouseSteeringInvertedOption = void (*)(const char* paramname, bool value);
    using SetNotificationTypeEnabled = void (*)(const char* id, bool value);
    using SetOutline = void (*)(const UniverseID componentid, const char*const connectionname, const uint8_t red, const uint8_t green, const uint8_t blue, const bool animated);
    using SetPlayerBlacklistDefault = void (*)(BlacklistID id, const char* listtype, const char* defaultgroup, bool value);
    using SetPlayerCameraCockpitView = void (*)(bool force);
    using SetPlayerCameraTargetView = void (*)(UniverseID targetid, bool force);
    using SetPlayerClothingTheme = void (*)(const char* theme);
    using SetPlayerFactionName = void (*)(const char* name);
    using SetPlayerGlobalLoadoutLevel = void (*)(float value);
    using SetPlayerIllegalWare = void (*)(const char* wareid, bool illegal);
    using SetPlayerLogo = void (*)(UILogo logo);
    using SetPlayerPaintTheme = void (*)(const char* theme);
    using SetPresentModeOption = void (*)(const char* mode);
    using SetRadarMousePosition = void (*)(float x, float y);
    using SetSSROption2 = void (*)(const char* value);
    using SetSavesCompressedOption = void (*)(bool value);
    using SetSelectedMapComponent = void (*)(UniverseID holomapid, UniverseID componentid);
    using SetSelectedMapComponents = void (*)(UniverseID holomapid, UniverseID* componentids, uint32_t numcomponentids);
    using SetSelectedMapGroup = void (*)(UniverseID holomapid, UniverseID destructibleid, const char* macroname, const char* path, const char* group);
    using SetSelectedMapMacroSlot = void (*)(UniverseID holomapid, UniverseID defensibleid, UniverseID moduleid, const char* macroname, bool ismodule, const char* upgradetypename, size_t slot);
    using SetShieldHullBarHullPercent = void (*)(const int shieldhullbarid, float hullpercent);
    using SetShieldHullBarShieldPercent = void (*)(const int shieldhullbarid, float shieldpercent);
    using SetSliderCellMaxFactor = void (*)(const int slidercellid, uint32_t maxfactor);
    using SetSliderCellMaxSelectValue = void (*)(const int slidercellid, double value);
    using SetSliderCellMaxValue = void (*)(const int slidercellid, double value);
    using SetSliderCellValue = void (*)(const int slidercellid, double value);
    using SetSpeakTargetNameOption = void (*)(bool value);
    using SetStatusBarCurrentValue = void (*)(const int statusbarid, float value);
    using SetStatusBarMaxValue = void (*)(const int statusbarid, float value);
    using SetStatusBarStartValue = void (*)(const int statusbarid, float value);
    using SetSubordinateGroupAssignment = void (*)(UniverseID controllableid, int group, const char* assignment);
    using SetSubordinateGroupDockAtCommander = void (*)(UniverseID controllableid, int group, bool value);
    using SetSupplyManual = void (*)(UniverseID containerid, const char* type, bool onoff);
    using SetTableNextConnectedTable = void (*)(const int tableid, const int nexttableid);
    using SetTableNextHorizontalConnectedTable = void (*)(const int tableid, const int nexttableid);
    using SetTablePreviousConnectedTable = void (*)(const int tableid, const int prevtableid);
    using SetTablePreviousHorizontalConnectedTable = void (*)(const int tableid, const int prevtableid);
    using SetTextureQualityOption = void (*)(const char* mode);
    using SetThrottleBidirectional = void (*)(bool newsetting);
    using SetTobiiAngleFactor = void (*)(float value);
    using SetTobiiDeadzoneAngle = void (*)(float value);
    using SetTobiiDeadzonePosition = void (*)(float value);
    using SetTobiiGazeAngleFactor = void (*)(float value);
    using SetTobiiGazeDeadzone = void (*)(float value);
    using SetTobiiGazeFilterStrength = void (*)(size_t value);
    using SetTobiiHeadFilterStrength = void (*)(size_t value);
    using SetTobiiHeadPositionFactor = void (*)(float value);
    using SetTobiiMode = void (*)(const char* mode);
    using SetTrackedMenuFullscreen = void (*)(const char* menu, bool fullscreen);
    using SetTurretGroupArmed = void (*)(UniverseID defensibleid, UniverseID contextid, const char* path, const char* group, bool arm);
    using SetTurretGroupMode2 = void (*)(UniverseID defensibleid, UniverseID contextid, const char* path, const char* group, const char* mode);
    using SetUIScaleFactor = void (*)(const float scale);
    using SetVRVivePointerHand = void (*)(int hand);
    using SetVentureOption = void (*)(bool setting);
    using SetVisitorNamesShownOption = void (*)(bool setting);
    using SetWeaponArmed = void (*)(UniverseID weaponid, bool arm);
    using SetWeaponGroup = void (*)(UniverseID defensibleid, UniverseID weaponid, bool primary, uint32_t groupidx, bool value);
    using SetWeaponMode = void (*)(UniverseID weaponid, const char* mode);
    using SetWidgetAssociatedElement = void (*)(const int widgetid, bool value);
    using ShowBuildPlotPlacementMap = void (*)(UniverseID holomapid, UniverseID sectorid);
    using ShowConstructionMap = void (*)(UniverseID holomapid, UniverseID stationid, const char* constructionplanid, bool restore);
    using ShowInteractMenu = void (*)(const UniverseID componentid, const char*const connectionname, const uint32_t id);
    using ShowObjectConfigurationMap = void (*)(UniverseID holomapid, UniverseID defensibleid, UniverseID moduleid, const char* macroname, bool ismodule, UILoadout uiloadout);
    using ShowUniverseMacroMap = void (*)(UniverseID holomapid, const char* macroname, const char* startsectormacroname, UIPosRot sectoroffset, bool setoffset, bool showzone);
    using ShowUniverseMap2 = void (*)(UniverseID holomapid, bool setoffset, bool showzone, bool forcebuildershipicons, UniverseID startsectorid, UIPosRot startpos);
    using SignalObjectWithNPCSeed = void (*)(UniverseID objecttosignalid, const char* param, NPCSeed person, UniverseID controllableid);
    using SkipNextStartAnimation = void (*)();
    using SpawnObjectAtPos = void (*)(const char* macroname, UniverseID sectorid, UIPosRot offset);
    using StartBriefing = void (*)(MissionID missionid, const char* texturename, bool issubmission);
    using StartControlPanelHack = void (*)(UIComponentSlot target, const char* paneltypeid);
    using StartIntroAnimation = void (*)(const char* triggername);
    using StartMapBoxSelect = void (*)(UniverseID holomapid, bool selectenemies);
    using StartPanMap = void (*)(UniverseID holomapid);
    using StartPlayerActivity = void (*)(const char* activityid);
    using StartResearch = void (*)(const char* wareid, UniverseID researchmoduleid);
    using StartRotateMap = void (*)(UniverseID holomapid);
    using StartStartMenuBGMusic = void (*)();
    using StartVoiceSequence = void (*)(const char* sequenceid, UniverseID entityid);
    using StopBriefing = void (*)(MissionID missionid, bool issubmission);
    using StopDetailmonitorCutscene = void (*)(uint32_t cutsceneid);
    using StopMapBoxSelect = void (*)(UniverseID holomapid);
    using StopPlayerActivity = void (*)(const char* activityid);
    using StopStartMenuBGMusic = void (*)();
    using StopVoiceSequence = void (*)();
    using StoreConstructionMapState = void (*)(UniverseID holomapid);
    using TargetRadarComponent = void (*)();
    using ToggleDrones = void (*)(uint32_t dronetype);
    using ToggleFlightAssist = void (*)();
    using ToggleScreenDisplayOption = void (*)();
    using TrackMenu = void (*)(const char* menu, bool fullscreen);
    using TransportPlayerToTarget = void (*)(UIComponentSlot target);
    using UndoConstructionMapChange = void (*)(UniverseID holomapid);
    using UnmutePlayerAlert = void (*)(size_t index, bool silent);
    using UnsetRadarRenderTarget = void (*)();
    using UpdateBlacklist = void (*)(BlacklistInfo info);
    using UpdateConstructionMapItemLoadout = void (*)(UniverseID holomapid, size_t itemidx, UniverseID defensibleid, UILoadout uiloadout);
    using UpdateMapBuildPlot = void (*)(UniverseID holomapid);
    using UpdateObjectConfigurationMap = void (*)(UniverseID holomapid, UniverseID defensibleid, UniverseID moduleid, const char* macroname, bool ismodule, UILoadout uiloadout);
    using UpdatePlayerAlert = void (*)(PlayerAlertInfo uialert);
    using UpdateProduction = void (*)(UniverseID containerormoduleid, bool force);
    using UpdateProductionTradeOffers = void (*)(UniverseID containerid);
    using UpdateSupplyOverrides = void (*)(UniverseID containerid, SupplyOverride* overrides, uint32_t numoverrides);
    using ZoomMap = void (*)(UniverseID holomapid, float zoomstep);
}
