#pragma once
#include "fii_typedef_struct.h"
namespace X4FFI
{
	using AbortBoardingOperation = bool (*)(UniverseID defensibletargetid, const char* boarderfactionid);
	using AbortMission = void (*)(MissionID missionid);
	using AddAttackerToBoardingOperation = bool (*)(UniverseID defensibletargetid, UniverseID defensibleboarderid, const char* boarderfactionid, const char* actionid, uint32_t * marinetieramounts, int32_t * marinetierskilllevels, uint32_t nummarinetiers);
	using AddBuildTask2 = void (*)(UniverseID containerid, UniverseID defensibleid, const char* macroname, UILoadout uiloadout, int64_t price, CrewTransferInfo crewtransfer, bool immediate, const char* customname);
	using AddCrewExchangeOrder = void (*)(UniverseID containerid, UniverseID partnercontainerid, NPCSeed * npcs, uint32_t numnpcs, NPCSeed * partnernpcs, uint32_t numpartnernpcs, bool tradecomputer);
	using AddHoloMap = UniverseID(*)(const char* texturename, float x0, float x1, float y0, float y1, float aspectx, float aspecty);
	using AddPlayerAlert = void (*)(PlayerAlertInfo alert);
	using AddPlayerMoney = void (*)(int64_t money);
	using AddResearch = void (*)(const char* wareid);
	using AddSimilarMapComponentsToSelection = void (*)(UniverseID holomapid, UniverseID componentid);
	using AdjustOrder = bool (*)(UniverseID controllableid, size_t idx, size_t newidx, bool enabled, bool forcestates, bool checkonly);
	using AreAssertsEnabled = bool (*)();
	using AreMandatoryAssertsEnabled = bool (*)();
	using AreOptionalAssertEnabled = bool (*)();
	using CanActivateSeta = bool (*)(bool checkcontext);
	using CanApplyKnownLoadout = bool (*)(const char* macroname, const char* loadoutid);
	using CanBuildLoadout = bool (*)(UniverseID containerid, UniverseID defensibleid, const char* macroname, const char* loadoutid);
	using CanCancelConstruction = bool (*)(UniverseID containerid, BuildTaskID id);
	using CanContainerEquipShip = bool (*)(UniverseID containerid, UniverseID shipid);
	using CanContainerMineTransport = bool (*)(UniverseID containerid, const char* transportname);
	using CanContainerSupplyShip = bool (*)(UniverseID containerid, UniverseID shipid);
	using CanContainerTransport = bool (*)(UniverseID containerid, const char* transportname);
	using CanControllableHaveControlEntity = bool (*)(UniverseID controllableid, const char* postid);
	using CanDockAtDockingBay = bool (*)(UniverseID shipid, UniverseID dockingbayid);
	using CanGenerateValidKnownLoadout = bool (*)(const char* macroname);
	using CanGenerateValidLoadout = bool (*)(UniverseID containerid, const char* macroname);
	using CanOpenWebBrowser = bool (*)(void);
	using CanPlayerCommTarget = bool (*)(UniverseID componentid);
	using CanPlayerStandUp = bool (*)(void);
	using CanStartTravelMode = bool (*)(UniverseID objectid);
	using CanTeleportPlayerTo = const char* (*)(UniverseID controllableid, bool allowcontrolling, bool force);
	using ChangeMapBuildPlot = void (*)(UniverseID holomapid, float x, float y, float z);
	using CheatDockingTraffic = void (*)(void);
	using CheckWeaponModCompatibility = bool (*)(UniverseID weaponid, const char* wareid);
	using ClearErrorLog = void (*)();
	using ClearMapBehaviour = void (*)(UniverseID holomapid);
	using ClearMapBuildPlot = void (*)(UniverseID holomapid);
	using ClearMapTradeFilterByMinTotalVolume = void (*)(UniverseID holomapid);
	using ClearMapTradeFilterByPlayerOffer = void (*)(UniverseID holomapid, bool buysellswitch);
	using ClearMapTradeFilterByWare = void (*)(UniverseID holomapid);
	using ClearProductionItems = void (*)(UniverseID productionmoduleid);
	using ClearRendertarget = void (*)(const char* rendertarget);
	using ClearSelectedMapComponents = void (*)(UniverseID holomapid);
	using ClearSelectedMapMacroSlots = void (*)(UniverseID holomapid);
	using CopyToClipboard = bool (*)(const char* const text);
	using CreateBlacklist = BlacklistID(*)(BlacklistInfo info);
	using CreateBoardingOperation = bool (*)(UniverseID defensibletargetid, const char* boarderfactionid, uint32_t approachthreshold, uint32_t insertionthreshold);
	using CreateNPCFromPerson = UniverseID(*)(NPCSeed person, UniverseID controllableid);
	using CreateOrder = uint32_t(*)(UniverseID controllableid, const char* orderid, bool default);
	using CreateOrder = uint32_t(*)(UniverseID controllableid, const char* orderid, bool defaultorder);
	using DisableAsserts = void (*)();
	using DisableOptionalAsserts = void (*)();
	using DismantleEngineMod = void (*)(UniverseID objectid);
	using DismantleGroupedWeaponMod = void (*)(UniverseID defensibleid, UniverseID contextid, const char* group);
	using DismantleShieldMod = void (*)(UniverseID defensibleid, UniverseID contextid, const char* group);
	using DismantleShipMod = void (*)(UniverseID shipid);
	using DismantleWeaponMod = void (*)(UniverseID weaponid);
	using DropCargo = bool (*)(UniverseID containerid, const char* wareid, uint32_t amount);
	using DropInventory = bool (*)(UniverseID entityid, const char* lockboxid, UIWareAmount * wares, uint32_t numwares);
	using EnableAllCheats = void (*)(void);
	using EnableAsserts = void (*)();
	using EnableOptionalAsserts = void (*)();
	using EnableOrder = bool (*)(UniverseID controllableid, size_t idx);
	using EnablePlannedDefaultOrder = bool (*)(UniverseID controllableid, bool checkonly);
	using EndGuidance = void (*)(void);
	using EnterInteractMenu = void (*)();
	using ExtendBuildPlot = bool (*)(UniverseID stationid, Coord3D poschange, Coord3D negchange, bool allowreduction);
	using FilterComponentByText = bool (*)(UniverseID componentid, uint32_t numtexts, const char** textarray, bool includecontainedobjects);
	using GenerateFactionRelationText = const char* (*)(const char* factionid);
	using GenerateShipKnownLoadout = void (*)(UILoadout * result, const char* macroname, float level);
	using GenerateShipKnownLoadoutCounts = void (*)(UILoadoutCounts * result, const char* macroname, float level);
	using GenerateShipLoadout = void (*)(UILoadout * result, UniverseID containerid, UniverseID shipid, const char* macroname, float level);
	using GenerateShipLoadoutCounts = void (*)(UILoadoutCounts * result, UniverseID containerid, UniverseID shipid, const char* macroname, float level);
	using GetActiveMissionID = uint64_t(*)();
	using GetActiveMissionID = uint64_t(*)(void);
	using GetActiveObjectiveType = const char* (*)(void);
	using GetAllBlacklists = uint32_t(*)(BlacklistID * result, uint32_t resultlen);
	using GetAllBoardingBehaviours = uint32_t(*)(BoardingBehaviour * result, uint32_t resultlen);
	using GetAllBoardingPhases = uint32_t(*)(BoardingPhase * result, uint32_t resultlen);
	using GetAllControlPosts = uint32_t(*)(ControlPostInfo * result, uint32_t resultlen);
	using GetAllCountermeasures = uint32_t(*)(AmmoData * result, uint32_t resultlen, UniverseID defensibleid);
	using GetAllEquipment = uint32_t(*)(EquipmentWareInfo * result, uint32_t resultlen, bool playerblueprint);
	using GetAllFactionShips = uint32_t(*)(UniverseID * result, uint32_t resultlen, const char* factionid);
	using GetAllFactionStations = uint32_t(*)(UniverseID * result, uint32_t resultlen, const char* factionid);
	using GetAllInventoryBombs = uint32_t(*)(AmmoData * result, uint32_t resultlen, UniverseID entityid);
	using GetAllLaserTowers = uint32_t(*)(AmmoData * result, uint32_t resultlen, UniverseID defensibleid);
	using GetAllMines = uint32_t(*)(AmmoData * result, uint32_t resultlen, UniverseID defensibleid);
	using GetAllMissiles = uint32_t(*)(AmmoData * result, uint32_t resultlen, UniverseID defensibleid);
	using GetAllModuleSets = uint32_t(*)(UIModuleSet * result, uint32_t resultlen);
	using GetAllNavBeacons = uint32_t(*)(AmmoData * result, uint32_t resultlen, UniverseID defensibleid);
	using GetAllRaces = uint32_t(*)(RaceInfo * result, uint32_t resultlen);
	using GetAllResourceProbes = uint32_t(*)(AmmoData * result, uint32_t resultlen, UniverseID defensibleid);
	using GetAllResponsesToSignal = uint32_t(*)(ResponseInfo * result, uint32_t resultlen, const char* signalid);
	using GetAllRoles = uint32_t(*)(PeopleInfo * result, uint32_t resultlen);
	using GetAllSatellites = uint32_t(*)(AmmoData * result, uint32_t resultlen, UniverseID defensibleid);
	using GetAllShipMacros = uint32_t(*)(const char** result, uint32_t resultlen, bool playerblueprint);
	using GetAllSignals = uint32_t(*)(SignalInfo * result, uint32_t resultlen);
	using GetAllUnits = uint32_t(*)(UnitData * result, uint32_t resultlen, UniverseID defensibleid, bool onlydrones);
	using GetAllowedWeaponSystems = uint32_t(*)(WeaponSystemInfo * result, uint32_t resultlen, UniverseID defensibleid, size_t orderidx, bool usedefault);
	using GetAmountOfWareAvailable = uint32_t(*)(const char* wareid, UniverseID productionmoduleid);
	using GetAskToSignalForControllable = bool (*)(const char* signalid, UniverseID controllableid);
	using GetAskToSignalForFaction = bool (*)(const char* signalid, const char* factionid);
	using GetAttackersOfBoardingOperation = uint32_t(*)(UniverseID * result, uint32_t resultlen, UniverseID defensibletargetid, const char* boarderfactionid);
	using GetAvailableClothingThemes = uint32_t(*)(UIClothingTheme * result, uint32_t resultlen);
	using GetAvailableEquipment = uint32_t(*)(EquipmentWareInfo * result, uint32_t resultlen, UniverseID containerid, const char* classid);
	using GetAvailableEquipmentMods = uint32_t(*)(UIEquipmentMod * result, uint32_t resultlen);
	using GetAvailableLockboxes = uint32_t(*)(const char** result, uint32_t resultlen, UniverseID entityid);
	using GetAvailablePaintThemes = uint32_t(*)(UIPaintTheme * result, uint32_t resultlen);
	using GetBlacklistInfo = bool (*)(BlacklistInfo * info, BlacklistID id);
	using GetBlacklistInfoCounts = BlacklistCounts(*)(BlacklistID id);
	using GetBlueprints = uint32_t(*)(UIBlueprint * result, uint32_t resultlen, const char* set, const char* category, const char* macroname);
	using GetBoardingActionOfAttacker = const char* (*)(UniverseID defensibletargetid, UniverseID defensibleboarderid, const char* boarderfactionid);
	using GetBoardingCasualtiesOfTier = uint32_t(*)(int32_t marinetierskilllevel, UniverseID defensibletargetid, const char* boarderfactionid);
	using GetBoardingMarineTierAmountsFromAttacker = bool (*)(uint32_t * resultmarinetieramounts, int32_t * inputmarinetierskilllevels, uint32_t inputnummarinetiers, UniverseID defensibletargetid, UniverseID defensibleboarderid, const char* boarderfactionid);
	using GetBoardingRiskThresholds = BoardingRiskThresholds(*)(UniverseID defensibletargetid, const char* boarderfactionid);
	using GetBoardingStrengthFromOperation = uint32_t(*)(UniverseID defensibletargetid, const char* boarderfactionid);
	using GetBoardingStrengthOfControllableTierAmounts = uint32_t(*)(UniverseID controllableid, uint32_t * marinetieramounts, int32_t * marinetierskilllevels, uint32_t nummarinetiers);
	using GetBuildDuration = double (*)(UniverseID containerid, UIBuildOrderList order);
	using GetBuildMapStationLocation = bool (*)(UniverseID holomapid, UIPosRot * location);
	using GetBuildPlotCenterOffset = Coord3D(*)(UniverseID stationid);
	using GetBuildPlotPayment = int64_t(*)(UniverseID stationid, bool* positionchanged);
	using GetBuildPlotPrice = int64_t(*)(UniverseID sectorid, UIPosRot location, float x, float y, float z, const char* factionid);
	using GetBuildPlotSize = Coord3D(*)(UniverseID stationid);
	using GetBuildProcessorEstimatedTimeLeft = double (*)(UniverseID buildprocessorid);
	using GetBuildTaskCrewTransferInfo = void (*)(CrewTransferInfo * result, UniverseID containerid, BuildTaskID id);
	using GetBuildTaskDuration = double (*)(UniverseID containerid, BuildTaskID id);
	using GetBuildTaskInfo = BuildTaskInfo(*)(BuildTaskID id);
	using GetBuildTasks = uint32_t(*)(BuildTaskInfo * result, uint32_t resultlen, UniverseID containerid, UniverseID buildmoduleid, bool isinprogress, bool includeupgrade);
	using GetBuildWarePrice = int64_t(*)(UniverseID containerid, const char* warename);
	using GetBuilderHiringFee = int64_t(*)(void);
	using GetCameraRotation = Rotation(*)();
	using GetCargoTransportTypes = uint32_t(*)(StorageInfo * result, uint32_t resultlen, UniverseID containerid, bool merge, bool aftertradeorders);
	using GetCenteredMousePos = Coord2D(*)(void);
	using GetCommonContext = UniverseID(*)(UniverseID componentid, UniverseID othercomponentid, bool includeself, bool includeother, UniverseID limitid, bool includelimit);
	using GetComponentClass = const char* (*)(UniverseID componentid);
	using GetComponentDetails = ComponentDetails(*)(const UniverseID componentid, const char* const connectionname);
	using GetComponentName = const char* (*)(UniverseID componentid);
	using GetComponentOffset = PosRot(*)(const UniverseID componentid);
	using GetComponentScreenPosition = ScreenPos(*)(const UniverseID componentid, const uint32_t iconsizeonscreen, const uint32_t iconsizeoffscreen);
	using GetConfigSetting = int (*)(const char* const setting);
	using GetContainerBuildPriceFactor = float (*)(UniverseID containerid);
	using GetContainerBuilderMacros = uint32_t(*)(const char** result, uint32_t resultlen, UniverseID containerid);
	using GetContainerWareReservations = uint32_t(*)(WareReservationInfo * result, uint32_t resultlen, UniverseID containerid);
	using GetContextByClass = UniverseID(*)(UniverseID componentid, const char* classname, bool includeself);
	using GetContextForTransporterCheck = UniverseID(*)(UniverseID positionalid);
	using GetControllableBlacklistID = BlacklistID(*)(UniverseID controllableid, const char* listtype, const char* defaultgroup);
	using GetCurrentAmmoOfWeapon = const char* (*)(UniverseID weaponid);
	using GetCurrentBoardingPhase = const char* (*)(UniverseID defensibletargetid, const char* boarderfactionid);
	using GetCurrentBuildProgress = float (*)(UniverseID containerid);
	using GetCurrentCrosshairMessage = CrosshairMessage(*)();
	using GetCurrentDroneMode = const char* (*)(UniverseID defensibleid, const char* dronetype);
	using GetCurrentGameTime = double (*)(void);
	using GetCurrentLoadoutStatistics2 = UILoadoutStatistics2(*)(UniverseID shipid);
	using GetCurrentMissionOffers = uint32_t(*)(uint64_t * result, uint32_t resultlen, bool showninbbs);
	using GetCurrentPlayerLogo = UILogo(*)(void);
	using GetCustomGameStartLoadoutProperty = void (*)(UILoadout * result, const char* id, const char* propertyid);
	using GetCustomGameStartLoadoutPropertyCounts = void (*)(UILoadoutCounts * result, const char* id, const char* propertyid);
	using GetCustomGameStartLoadoutPropertyState = CustomGameStartLoadoutPropertyState(*)(const char* id, const char* propertyid);
	using GetCustomGameStartStringProperty = const char* (*)(const char* id, const char* propertyid, CustomGameStartStringPropertyState * state);
	using GetDamagedSubComponents = uint32_t(*)(UniverseID * result, uint32_t resultlen, UniverseID objectid);
	using GetDefaultCountermeasureStorageCapacity = uint32_t(*)(const char* macroname);
	using GetDefaultMissileStorageCapacity = uint32_t(*)(const char* macroname);
	using GetDefaultOrder = bool (*)(Order * result, UniverseID controllableid);
	using GetDefaultResponseToSignalForControllable = const char* (*)(const char* signalid, UniverseID controllableid);
	using GetDefaultResponseToSignalForFaction = const char* (*)(const char* signalid, const char* factionid);
	using GetDefensibleActiveWeaponGroup = uint32_t(*)(UniverseID defensibleid, bool primary);
	using GetDefensibleDPS = uint32_t(*)(DPSData * result, UniverseID defensibleid, bool primary, bool secondary, bool lasers, bool missiles, bool turrets, bool includeheat, bool includeinactive);
	using GetDefensibleDeployableCapacity = uint32_t(*)(UniverseID defensibleid);
	using GetDefensibleLoadoutLevel = float (*)(UniverseID defensibleid);
	using GetDockedShips = uint32_t(*)(UniverseID * result, uint32_t resultlen, UniverseID dockingbayorcontainerid, const char* factionid);
	using GetDroneModes = uint32_t(*)(DroneModeInfo * result, uint32_t resultlen, UniverseID defensibleid, const char* dronetype);
	using GetEntityActiveIcon = const char* (*)(const UniverseID componentid);
	using GetEntityCombinedSkill = int32_t(*)(UniverseID entityid, const char* role, const char* postid);
	using GetEntityInactiveIcon = const char* (*)(const UniverseID componentid);
	using GetEntitySelectedIcon = const char* (*)(const UniverseID componentid);
	using GetEnvironmentObject = UniverseID(*)();
	using GetEquipmentModInfo = EquipmentModInfo(*)(const char* wareid);
	using GetEquipmentModPropertyName = const char* (*)(const char* wareid);
	using GetFPS = FPSDetails(*)();
	using GetFactionDetails = FactionDetails(*)(const char* factionid);
	using GetFactionRepresentative = UniverseID(*)(const char* factionid);
	using GetFleetName = const char* (*)(UniverseID controllableid);
	using GetFormationShapes = uint32_t(*)(UIFormationInfo * result, uint32_t resultlen);
	using GetFreeCountermeasureStorageAfterTradeOrders = uint32_t(*)(UniverseID defensibleid);
	using GetFreeDeployableStorageAfterTradeOrders = uint32_t(*)(UniverseID defensibleid);
	using GetFreeMissileStorageAfterTradeOrders = uint32_t(*)(UniverseID defensibleid);
	using GetFreePeopleCapacity = uint32_t(*)(UniverseID controllableid);
	using GetGameVersion = GameVersion(*)();
	using GetHQs = uint32_t(*)(UniverseID * result, uint32_t resultlen, const char* factionid);
	using GetIllegalToFactions = uint32_t(*)(const char** result, uint32_t resultlen, const char* wareid);
	using GetInstalledEngineMod = bool (*)(UniverseID objectid, UIEngineMod * enginemod);
	using GetInstalledPaintMod = bool (*)(UniverseID objectid, UIPaintMod * paintmod);
	using GetInstalledShieldMod = bool (*)(UniverseID defensibleid, UniverseID contextid, const char* group, UIShieldMod * shieldmod);
	using GetInstalledWeaponMod = bool (*)(UniverseID weaponid, UIWeaponMod * weaponmod);
	using GetInstantiatedPerson = UniverseID(*)(NPCSeed person, UniverseID controllableid);
	using GetInventoryPaintMods = uint32_t(*)(UIPaintMod * result, uint32_t resultlen);
	using GetLastPlayerControlledShipID = UniverseID(*)(void);
	using GetLibraryEntryAliases = uint32_t(*)(const char** result, uint32_t resultlen, const char* librarytypeid, const char* id);
	using GetLicenceInfo = bool (*)(LicenceInfo * result, const char* factionid, const char* licenceid);
	using GetLoadout = void (*)(UILoadout * result, UniverseID defensibleid, const char* macroname, const char* loadoutid);
	using GetLoadoutCounts = uint32_t(*)(UILoadoutCounts * result, UniverseID defensibleid, const char* macroname, const char* loadoutid);
	using GetLoadoutInvalidPatches = uint32_t(*)(InvalidPatchInfo * result, uint32_t resultlen, UniverseID defensibleid, const char* macroname, const char* loadoutid);
	using GetLoadoutStatistics2 = UILoadoutStatistics2(*)(UniverseID shipid, const char* macroname, UILoadout uiloadout);
	using GetLoadoutsInfo = uint32_t(*)(UILoadoutInfo * result, uint32_t resultlen, UniverseID componentid, const char* macroname);
	using GetLocalizedText = const char* (*)(const uint32_t pageid, uint32_t textid, const char* const defaultvalue);
	using GetLocalizedText = const char* (*)(const uint32_t pageid, uint32_t textid, const char* const defaultvalue);
	using GetMacroClass = const char* (*)(const char* macroname);
	using GetMacroDeployableCapacity = uint32_t(*)(const char* macroname);
	using GetMacroMissileCapacity = uint32_t(*)(const char* macroname);
	using GetMapComponentMissions = uint32_t(*)(MissionID * result, uint32_t resultlen, UniverseID holomapid, UniverseID componentid);
	using GetMapPositionOnEcliptic2 = UniverseID(*)(UniverseID holomapid, UIPosRot * position, bool adaptiveecliptic, UniverseID eclipticsectorid, UIPosRot eclipticoffset);
	using GetMapRenderedComponents = uint32_t(*)(UniverseID * result, uint32_t resultlen, UniverseID holomapid);
	using GetMapSelectedComponents = uint32_t(*)(UniverseID * result, uint32_t resultlen, UniverseID holomapid);
	using GetMapState = void (*)(UniverseID holomapid, HoloMapState * state);
	using GetMapTradeVolumeParameter = UIMapTradeVolumeParameter(*)(void);
	using GetMaxLoadoutStatistics2 = UILoadoutStatistics2(*)(UniverseID shipid, const char* macroname);
	using GetMaxProductionStorage = uint32_t(*)(UIWareAmount * result, uint32_t resultlen, UniverseID containerid);
	using GetMessageDetails2 = MessageDetails2(*)(const uint32_t messageid);
	using GetMessages = uint32_t(*)(MessageInfo * result, uint32_t resultlen, size_t start, size_t count, const char* categoryname);
	using GetMineablesAtSectorPos = uint32_t(*)(YieldInfo * result, uint32_t resultlen, UniverseID sectorid, Coord3D position);
	using GetMinimumBuildPlotCenterOffset = Coord3D(*)(UniverseID stationid);
	using GetMinimumBuildPlotSize = Coord3D(*)(UniverseID stationid);
	using GetMissileCargo = uint32_t(*)(UIWareInfo * result, uint32_t resultlen, UniverseID containerid);
	using GetMissingBuildResources = uint32_t(*)(UIWareInfo * result, uint32_t resultlen);
	using GetMissingLoadoutResources = uint32_t(*)(UIWareInfo * result, uint32_t resultlen);
	using GetMissionBriefingIcon = MissionBriefingIconInfo(*)(MissionID missionid);
	using GetMissionGroupDetails = MissionGroupDetails(*)(MissionID missionid);
	using GetMissionIDDetails = MissionDetails(*)(uint64_t missionid);
	using GetMissionIDObjective = MissionObjective(*)(uint64_t missionid);
	using GetMissionIDObjectiveTarget = UniverseID(*)(uint64_t missionid, size_t targetIndex);
	using GetMissionObjectiveStep2 = MissionObjectiveStep2(*)(uint64_t missionid, size_t objectiveIndex);
	using GetMissionOfferIcons = IconSet(*)(const UniverseID componentid);
	using GetMissionThreadSubMissions = uint32_t(*)(MissionID * result, uint32_t resultlen, MissionID missionid);
	using GetMoonInfo = uint32_t(*)(UICelestialBodyInfo * result, uint32_t resultlen, UniverseID clusterid, uint32_t planetidx);
	using GetNotificationTypes = uint32_t(*)(UINotificationType * result, uint32_t resultlen);
	using GetNumAllBlacklists = uint32_t(*)(void);
	using GetNumAllBoardingBehaviours = uint32_t(*)(void);
	using GetNumAllBoardingPhases = uint32_t(*)(void);
	using GetNumAllControlPosts = uint32_t(*)(void);
	using GetNumAllCountermeasures = uint32_t(*)(UniverseID defensibleid);
	using GetNumAllEquipment = uint32_t(*)(bool playerblueprint);
	using GetNumAllFactionShips = uint32_t(*)(const char* factionid);
	using GetNumAllFactionStations = uint32_t(*)(const char* factionid);
	using GetNumAllInventoryBombs = uint32_t(*)(UniverseID entityid);
	using GetNumAllLaserTowers = uint32_t(*)(UniverseID defensibleid);
	using GetNumAllMines = uint32_t(*)(UniverseID defensibleid);
	using GetNumAllMissiles = uint32_t(*)(UniverseID defensibleid);
	using GetNumAllModuleSets = uint32_t(*)();
	using GetNumAllNavBeacons = uint32_t(*)(UniverseID defensibleid);
	using GetNumAllRaces = uint32_t(*)(void);
	using GetNumAllResourceProbes = uint32_t(*)(UniverseID defensibleid);
	using GetNumAllResponsesToSignal = uint32_t(*)(const char* signalid);
	using GetNumAllRoles = uint32_t(*)(void);
	using GetNumAllSatellites = uint32_t(*)(UniverseID defensibleid);
	using GetNumAllShipMacros = uint32_t(*)(bool playerblueprint);
	using GetNumAllSignals = uint32_t(*)(void);
	using GetNumAllUnits = uint32_t(*)(UniverseID defensibleid, bool onlydrones);
	using GetNumAllowedWeaponSystems = uint32_t(*)(void);
	using GetNumAttackersOfBoardingOperation = uint32_t(*)(UniverseID defensibletargetid, const char* boarderfactionid);
	using GetNumAvailableClothingThemes = uint32_t(*)();
	using GetNumAvailableEquipment = uint32_t(*)(UniverseID containerid, const char* classid);
	using GetNumAvailableEquipmentMods = uint32_t(*)();
	using GetNumAvailableLockboxes = uint32_t(*)(UniverseID entityid);
	using GetNumAvailablePaintThemes = uint32_t(*)();
	using GetNumBlueprints = uint32_t(*)(const char* set, const char* category, const char* macroname);
	using GetNumBoardingMarinesFromOperation = uint32_t(*)(UniverseID defensibletargetid, const char* boarderfactionid);
	using GetNumBuildTaskCrewTransferInfo = CrewTransferInfoCounts(*)(UniverseID containerid, BuildTaskID id);
	using GetNumBuildTasks = uint32_t(*)(UniverseID containerid, UniverseID buildmoduleid, bool isinprogress, bool includeupgrade);
	using GetNumCargoTransportTypes = uint32_t(*)(UniverseID containerid, bool merge);
	using GetNumContainedKnownSpaces = uint32_t(*)(UniverseID spaceid);
	using GetNumContainedKnownUnreadSpaces = uint32_t(*)(UniverseID spaceid);
	using GetNumContainerBuilderMacros = uint32_t(*)(UniverseID containerid);
	using GetNumContainerWareReservations = uint32_t(*)(UniverseID containerid);
	using GetNumCurrentMissionOffers = uint32_t(*)(bool showninbbs);
	using GetNumDockedShips = uint32_t(*)(UniverseID dockingbayorcontainerid, const char* factionid);
	using GetNumDroneModes = uint32_t(*)(UniverseID defensibleid, const char* dronetype);
	using GetNumFormationShapes = uint32_t(*)(void);
	using GetNumHQs = uint32_t(*)(const char* factionid);
	using GetNumIllegalToFactions = uint32_t(*)(const char* wareid);
	using GetNumInventoryPaintMods = uint32_t(*)(void);
	using GetNumLibraryEntryAliases = uint32_t(*)(const char* librarytypeid, const char* id);
	using GetNumLoadoutsInfo = uint32_t(*)(UniverseID componentid, const char* macroname);
	using GetNumMapComponentMissions = uint32_t(*)(UniverseID holomapid, UniverseID componentid);
	using GetNumMapRenderedComponents = uint32_t(*)(UniverseID holomapid);
	using GetNumMapSelectedComponents = uint32_t(*)(UniverseID holomapid);
	using GetNumMaxProductionStorage = uint32_t(*)(UniverseID containerid);
	using GetNumMessages = uint32_t(*)(const char* categoryname, bool);
	using GetNumMineablesAtSectorPos = uint32_t(*)(UniverseID sectorid, Coord3D position);
	using GetNumMissileCargo = uint32_t(*)(UniverseID containerid);
	using GetNumMissingBuildResources2 = uint32_t(*)(UniverseID containerid, UIBuildOrderList * orders, uint32_t numorders, bool playercase);
	using GetNumMissingLoadoutResources2 = uint32_t(*)(UniverseID containerid, UIBuildOrderList * orders, uint32_t numorders, bool playercase);
	using GetNumMissionThreadSubMissions = uint32_t(*)(MissionID missionid);
	using GetNumNotificationTypes = uint32_t(*)(void);
	using GetNumObjectsWithSyncPoint = uint32_t(*)(uint32_t syncid, bool onlyreached);
	using GetNumOrderDefinitions = uint32_t(*)(void);
	using GetNumOrders = uint32_t(*)(UniverseID controllableid);
	using GetNumPeopleAfterOrders = uint32_t(*)(UniverseID controllableid, int32_t numorders);
	using GetNumPersonSuitableControlPosts = uint32_t(*)(UniverseID controllableid, UniverseID personcontrollableid, NPCSeed person, bool free);
	using GetNumPlannedStationModules = size_t(*)(UniverseID defensibleid, bool includeall);
	using GetNumPlayerAlertSounds = uint32_t(*)(void);
	using GetNumPlayerAlerts = uint32_t(*)(void);
	using GetNumPlayerLogos = uint32_t(*)(bool includestandard, bool includecustom);
	using GetNumPlayerShipBuildTasks = uint32_t(*)(bool isinprogress, bool includeupgrade);
	using GetNumPrimaryWeapons = size_t(*)();
	using GetNumRepairResources = uint32_t(*)(UniverseID componenttorepairid);
	using GetNumResearchModules = uint32_t(*)(UniverseID containerid);
	using GetNumSecondaryWeapons = size_t(*)();
	using GetNumSectorsByOwner = uint32_t(*)(const char* factionid);
	using GetNumShieldGroups = uint32_t(*)(UniverseID defensibleid);
	using GetNumSkills = uint32_t(*)(void);
	using GetNumSoftwarePredecessors = uint32_t(*)(const char* softwarename);
	using GetNumSoftwareSlots = uint32_t(*)(UniverseID controllableid, const char* macroname);
	using GetNumStationModules = uint32_t(*)(UniverseID stationid, bool includeconstructions, bool includewrecks);
	using GetNumStoredUnits = uint32_t(*)(UniverseID defensibleid, const char* cat, bool virtualammo);
	using GetNumSubComponents = uint32_t(*)(UniverseID containerid);
	using GetNumSuitableBuildProcessors = uint32_t(*)(UniverseID containerid, UniverseID objectid, const char* macroname);
	using GetNumSuitableControlPosts = uint32_t(*)(UniverseID controllableid, UniverseID entityid, bool free);
	using GetNumTiersOfRole = uint32_t(*)(const char* role);
	using GetNumTradeComputerOrders = size_t(*)(UniverseID controllableid);
	using GetNumTradeOfferStatistics = uint32_t(*)(UniverseID containerorspaceid, double starttime, double endtime, size_t numdatapoints);
	using GetNumUISystemInfo = UISystemInfoCounts(*)(UniverseID clusterid);
	using GetNumUnavailableUnits = uint32_t(*)(UniverseID defensibleid, const char* cat);
	using GetNumUnitCargo = uint32_t(*)(UniverseID containerid, bool onlydrones);
	using GetNumUnreadLibraryEntries = uint32_t(*)(const char* libraryid);
	using GetNumUpgradeGroups = uint32_t(*)(UniverseID destructibleid, const char* macroname);
	using GetNumUpgradeSlots = size_t(*)(UniverseID destructibleid, const char* macroname, const char* upgradetypename);
	using GetNumUsedLimitedModules = uint32_t(*)(UniverseID excludedstationid);
	using GetNumValidTransporterTargets = uint32_t(*)(UniverseID componentid);
	using GetNumVirtualUpgradeSlots = size_t(*)(UniverseID objectid, const char* macroname, const char* upgradetypename);
	using GetNumWareBlueprintOwners = uint32_t(*)(const char* wareid);
	using GetNumWareSources = uint32_t(*)(const char* wareid);
	using GetNumWares = uint32_t(*)(const char* tags, bool research, const char* licenceownerid, const char* exclusiontags);
	using GetNumWeaponGroupsByWeapon = uint32_t(*)(UniverseID defensibleid, UniverseID weaponid);
	using GetObjectIDCode = const char* (*)(UniverseID componentid);
	using GetObjectIDCode = const char* (*)(UniverseID objectid);
	using GetObjectPositionInSector = UIPosRot(*)(UniverseID objectid);
	using GetOrderDefinition = bool (*)(OrderDefinition * result, const char* orderdef);
	using GetOrderDefinitions = uint32_t(*)(OrderDefinition * result, uint32_t resultlen);
	using GetOrders = uint32_t(*)(Order * result, uint32_t resultlen, UniverseID controllableid);
	using GetOrders2 = uint32_t(*)(Order2 * result, uint32_t resultlen, UniverseID controllableid);
	using GetOwnerDetails = FactionDetails(*)(UniverseID componentid);
	using GetOwnerDetails = FactionDetails(*)(UniverseID componentid);
	using GetPOIDetails = POIDetails(*)(const uint64_t poiid);
	using GetPaidBuildPlotCenterOffset = Coord3D(*)(UniverseID stationid);
	using GetPaidBuildPlotSize = Coord3D(*)(UniverseID stationid);
	using GetParentComponent = UniverseID(*)(UniverseID componentid);
	using GetPeople = uint32_t(*)(PeopleInfo * result, uint32_t resultlen, UniverseID controllableid);
	using GetPeopleAfterOrders = uint32_t(*)(NPCInfo * result, uint32_t resultlen, UniverseID controllableid, int32_t numorders);
	using GetPeopleCapacity = uint32_t(*)(UniverseID controllableid, const char* macroname, bool includecrew);
	using GetPersonCombinedSkill = int32_t(*)(UniverseID controllableid, NPCSeed person, const char* role, const char* postid);
	using GetPersonName = const char* (*)(NPCSeed person, UniverseID controllableid);
	using GetPersonRole = const char* (*)(NPCSeed person, UniverseID controllableid);
	using GetPersonRoleName = const char* (*)(NPCSeed person, UniverseID controllableid);
	using GetPersonSkills = uint32_t(*)(Skill * result, NPCSeed person, UniverseID controllableid);
	using GetPersonSkillsForAssignment = uint32_t(*)(Skill2 * result, NPCSeed person, UniverseID controllableid, const char* role, const char* postid);
	using GetPersonSuitableControlPosts = uint32_t(*)(ControlPostInfo * result, uint32_t resultlen, UniverseID controllableid, UniverseID personcontrollableid, NPCSeed person, bool free);
	using GetPersonTier = int32_t(*)(NPCSeed npc, const char* role, UniverseID controllableid);
	using GetPickedMapComponent = UniverseID(*)(UniverseID holomapid);
	using GetPickedMapMacroSlot = bool (*)(UniverseID holomapid, UniverseID defensibleid, UniverseID moduleid, const char* macroname, bool ismodule, UILoadoutSlot * result);
	using GetPickedMapMission = MissionID(*)(UniverseID holomapid);
	using GetPickedMapMissionOffer = UniverseID(*)(UniverseID holomapid);
	using GetPickedMapOrder = UniverseID(*)(UniverseID holomapid, Order * result, bool* intermediate);
	using GetPickedMapTradeOffer = TradeID(*)(UniverseID holomapid);
	using GetPlannedDefaultOrder = bool (*)(Order * result, UniverseID controllableid);
	using GetPlannedStationModules = size_t(*)(UIConstructionPlanEntry * result, uint32_t resultlen, UniverseID defensibleid, bool includeall);
	using GetPlayerAlertSounds = uint32_t(*)(SoundInfo * result, uint32_t resultlen);
	using GetPlayerAlerts = uint32_t(*)(PlayerAlertInfo * result, uint32_t resultlen);
	using GetPlayerClothingTheme = const char* (*)(void);
	using GetPlayerComputerID = UniverseID(*)(void);
	using GetPlayerContainerID = UniverseID(*)(void);
	using GetPlayerControlledShipID = UniverseID(*)(void);
	using GetPlayerFactionName = const char* (*)(bool userawname);
	using GetPlayerGlobalLoadoutLevel = float (*)(void);
	using GetPlayerID = UniverseID(*)(void);
	using GetPlayerLogos = uint32_t(*)(UILogo * result, uint32_t resultlen, bool includestandard, bool includecustom);
	using GetPlayerName = const char* (*)(void);
	using GetPlayerObjectID = UniverseID(*)(void);
	using GetPlayerOccupiedShipID = UniverseID(*)(void);
	using GetPlayerPaintTheme = const char* (*)(void);
	using GetPlayerPaintThemeMod = bool (*)(UniverseID objectid, const char* macroname, UIPaintMod * paintmod);
	using GetPlayerShipBuildTasks = uint32_t(*)(BuildTaskInfo * result, uint32_t resultlen, bool isinprogress, bool includeupgrade);
	using GetPlayerShipID = UniverseID(*)(void);
	using GetPlayerTargetOffset = UIPosRot(*)(void);
	using GetPlayerZoneID = UniverseID(*)(void);
	using GetPrimaryWeapon = WeaponDetails(*)(size_t weaponnum);
	using GetPurchasableCargo = uint32_t(*)(UniverseID containerid, const char*);
	using GetPurposeName = const char* (*)(const char* purposeid);
	using GetRealComponentClass = const char* (*)(UniverseID componentid);
	using GetRectangleTargetElementExtents = float (*)(const int posid);
	using GetRelationStatus2 = RelationDetails(*)(const UniverseID componentid, const char* const connectionname);
	using GetRelativeAimOffset = PosRot(*)(const UniverseID componentid);
	using GetRelativeAimScreenPosition = Position2D(*)(const UniverseID componentid, const uint32_t iconsizeonscreen, const uint32_t iconsizeoffscreen);
	using GetRepairPrice = int64_t(*)(UniverseID componenttorepairid, UniverseID containerid);
	using GetRepairResources = uint32_t(*)(UIWareInfo * result, uint32_t resultlen, UniverseID componenttorepairid);
	using GetResearchModules = uint32_t(*)(UniverseID * result, uint32_t resultlen, UniverseID containerid);
	using GetRoleTierNPCs = uint32_t(*)(NPCSeed * result, uint32_t resultlen, UniverseID controllableid, const char* role, int32_t skilllevel);
	using GetRoleTiers = uint32_t(*)(RoleTierData * result, uint32_t resultlen, UniverseID controllableid, const char* role);
	using GetRoomForTransporter = UniverseID(*)(UIComponentSlot transporter);
	using GetSecondaryWeapon = WeaponDetails(*)(size_t weaponnum);
	using GetSectorControlStation = UniverseID(*)(UniverseID sectorid);
	using GetSectorsByOwner = uint32_t(*)(UniverseID * result, uint32_t resultlen, const char* factionid);
	using GetShieldGroup = bool (*)(ShieldGroup * result, UniverseID defensibleid, UniverseID destructibleid);
	using GetShieldGroups = uint32_t(*)(ShieldGroup * result, uint32_t resultlen, UniverseID defensibleid);
	using GetShipCombinedSkill = int32_t(*)(UniverseID shipid);
	using GetShipOrLaserTowerSize = const char* (*)(const UniverseID componentid);
	using GetShipPurpose = const char* (*)(const UniverseID componentid);
	using GetSlotComponent = UniverseID(*)(UIComponentSlot slot);
	using GetSlotSize = const char* (*)(UniverseID defensibleid, UniverseID moduleid, const char* macroname, bool ismodule, const char* upgradetypename, size_t slot);
	using GetSofttarget = SofttargetDetails(*)(void);
	using GetSoftwareMaxCompatibleVersion = const char* (*)(UniverseID controllableid, const char* macroname, const char* softwarename);
	using GetSoftwarePredecessors = uint32_t(*)(const char** result, uint32_t resultlen, const char* softwarename);
	using GetSoftwareSlots = uint32_t(*)(SoftwareSlot * result, uint32_t resultlen, UniverseID controllableid, const char* macroname);
	using GetSpecialNPCs = SpecialNPCSet(*)(const UniverseID componentid);
	using GetStationModules = uint32_t(*)(UniverseID * result, uint32_t resultlen, UniverseID stationid, bool includeconstructions, bool includewrecks);
	using GetSubordinateGroupAssignment = const char* (*)(UniverseID controllableid, int group);
	using GetSuitableControlPosts = uint32_t(*)(ControlPostInfo * result, uint32_t resultlen, UniverseID controllableid, UniverseID entityid, bool free);
	using GetSupplyBudget = int64_t(*)(UniverseID containerid);
	using GetSyncPointInfo = bool (*)(UniverseID controllableid, size_t orderidx, SyncPointInfo * result);
	using GetTargetElementOffset = PosRot(*)(const int posid);
	using GetTextHeight = float (*)(const char* const text, const char* const fontname, const float fontsize, const float wordwrapwidth);
	using GetTextHeight = float (*)(const char* const text, const char* const fontname, const float fontsize, const float wordwrapwidth);
	using GetTextWidth = float (*)(const char* const text, const char* const fontname, const float fontsize);
	using GetTiersOfRole = uint32_t(*)(RoleTierData * result, uint32_t resultlen, const char* role);
	using GetTopLevelContainer = UniverseID(*)(UniverseID componentid);
	using GetTradeOfferStatistics = uint32_t(*)(UITradeOfferStat * result, uint32_t resultlen, size_t numdatapoints);
	using GetTransporterLocationComponent = UniverseID(*)(UIComponentSlot transporter);
	using GetTransporterLocationName = const char* (*)(UIComponentSlot transporter);
	using GetTurretGroupMode2 = const char* (*)(UniverseID defensibleid, UniverseID contextid, const char* path, const char* group);
	using GetUIScale = float (*)(const bool scalewithresolution);
	using GetUISystemInfo = bool (*)(UISystemInfo * result, UniverseID clusterid);
	using GetUnitCargo = uint32_t(*)(UIWareInfo * result, uint32_t resultlen, UniverseID containerid, bool onlydrones);
	using GetUp = bool (*)(void);
	using GetUpgradeGroupInfo = UpgradeGroupInfo(*)(UniverseID destructibleid, const char* macroname, const char* path, const char* group, const char* upgradetypename);
	using GetUpgradeGroupInfo2 = UpgradeGroupInfo(*)(UniverseID destructibleid, const char* macroname, UniverseID contextid, const char* path, const char* group, const char* upgradetypename);
	using GetUpgradeGroups = uint32_t(*)(UpgradeGroup * result, uint32_t resultlen, UniverseID destructibleid, const char* macroname);
	using GetUpgradeGroups2 = uint32_t(*)(UpgradeGroup2 * result, uint32_t resultlen, UniverseID destructibleid, const char* macroname);
	using GetUpgradeSlotCurrentComponent = UniverseID(*)(UniverseID destructibleid, const char* upgradetypename, size_t slot);
	using GetUpgradeSlotCurrentMacro = const char* (*)(UniverseID defensibleid, UniverseID moduleid, const char* upgradetypename, size_t slot);
	using GetUpgradeSlotCurrentMacro = const char* (*)(UniverseID objectid, UniverseID moduleid, const char* upgradetypename, size_t slot);
	using GetUpgradeSlotGroup = UpgradeGroup(*)(UniverseID destructibleid, const char* macroname, const char* upgradetypename, size_t slot);
	using GetUsedLimitedModules = uint32_t(*)(UIMacroCount * result, uint32_t resultlen, UniverseID excludedstationid);
	using GetValidTransporterTargets = uint32_t(*)(UIComponentSlot * result, uint32_t resultlen, UniverseID componentid);
	using GetVirtualUpgradeSlotCurrentMacro = const char* (*)(UniverseID defensibleid, const char* upgradetypename, size_t slot);
	using GetWareBlueprintOwners = uint32_t(*)(const char** result, uint32_t resultlen, const char* wareid);
	using GetWareSources = uint32_t(*)(WareSource * result, uint32_t resultlen, const char* wareid);
	using GetWares = uint32_t(*)(const char** result, uint32_t resultlen, const char* tags, bool research, const char* licenceownerid, const char* exclusiontags);
	using GetWeaponGroupsByWeapon = uint32_t(*)(UIWeaponGroup * result, uint32_t resultlen, UniverseID defensibleid, UniverseID weaponid);
	using GetWeaponMode = const char* (*)(UniverseID weaponid);
	using GetWorkForceInfo = WorkForceInfo(*)(UniverseID containerid, const char* raceid);
	using GetZoneAt = UniverseID(*)(UniverseID sectorid, UIPosRot * uioffset);
	using HasControllableOwnBlacklist = bool (*)(UniverseID controllableid, const char* listtype);
	using HasControllableOwnResponse = bool (*)(UniverseID controllableid, const char* signalid);
	using HasDefaultLoadout = bool (*)(const char* macroname);
	using HasResearched = bool (*)(const char* wareid);
	using HasShipFlightAssist = bool (*)(UniverseID shipid);
	using InstallEngineMod = bool (*)(UniverseID objectid, const char* wareid);
	using InstallGroupedWeaponMod = bool (*)(UniverseID defensibleid, UniverseID contextid, const char* group, const char* wareid);
	using InstallPaintMod = bool (*)(UniverseID objectid, const char* wareid, bool useinventory);
	using InstallShieldMod = bool (*)(UniverseID defensibleid, UniverseID contextid, const char* group, const char* wareid);
	using InstallShipMod = bool (*)(UniverseID shipid, const char* wareid);
	using InstallWeaponMod = bool (*)(UniverseID weaponid, const char* wareid);
	using IsAdvancedSatellite = bool (*)(const UniverseID componentid);
	using IsAmmoMacroCompatible = bool (*)(const char* weaponmacroname, const char* ammomacroname);
	using IsAsteroid = bool (*)(const UniverseID componentid);
	using IsAutotargetingActive = bool (*)();
	using IsBomb = bool (*)(const UniverseID componentid);
	using IsBuilderBusy = bool (*)(UniverseID shipid);
	using IsCollectable = bool (*)(const UniverseID componentid);
	using IsCommander = bool (*)(const UniverseID componentid);
	using IsComponentClass = bool (*)(UniverseID componentid, const char* classname);
	using IsComponentOperational = bool (*)(UniverseID componentid);
	using IsComponentWrecked = bool (*)(UniverseID componentid);
	using IsContainerFactionTradeRescricted = bool (*)(UniverseID containerid, const char* wareid);
	using IsContestedSector = bool (*)(UniverseID sectorid);
	using IsControlPressed = bool (*)(void);
	using IsCrate = bool (*)(const UniverseID componentid);
	using IsCrystal = bool (*)(const UniverseID componentid);
	using IsCurrentOrderCritical = bool (*)(UniverseID controllableid);
	using IsDefensibleBeingBoardedBy = bool (*)(UniverseID defensibleid, const char* factionid);
	using IsDeployableMacroCompatible = bool (*)(UniverseID containerid, const char* macroname, const char* deployablemacroname);
	using IsDestructible2 = bool (*)(const UniverseID componentid, const char* const connectionname);
	using IsDetailUIElement = bool (*)(const UniverseID componentid, const char* const connectionname);
	using IsDroneTypeArmed = bool (*)(UniverseID defensibleid, const char* dronetype);
	using IsDroneTypeBlocked = bool (*)(UniverseID defensibleid, const char* dronetype);
	using IsEntity = bool (*)(const UniverseID componentid);
	using IsErrorLogActive = bool (*)();
	using IsExternalTargetMode = bool (*)();
	using IsExternalTargetMode = bool (*)();
	using IsExternalViewActive = bool (*)();
	using IsExternalViewActive = bool (*)();
	using IsFPSEnabled = bool (*)();
	using IsFactionAllyToFaction = bool (*)(const char* factionid, const char* otherfactionid);
	using IsFactionEnemyToFaction = bool (*)(const char* factionid, const char* otherfactionid);
	using IsFactionHQ = bool (*)(UniverseID stationid);
	using IsHQ = bool (*)(UniverseID stationid);
	using IsHUDActive = bool (*)();
	using IsIconValid = bool (*)(const char* iconid);
	using IsInfoUnlockedForPlayer = bool (*)(UniverseID componentid, const char* infostring);
	using IsKnownItemRead = bool (*)(const char* libraryid, const char* itemid);
	using IsKnownRead = bool (*)(UniverseID componentid);
	using IsKnownToPlayer = bool (*)(UniverseID componentid);
	using IsLaserTower = bool (*)(const UniverseID componentid);
	using IsLeftMouseButtonDown = bool (*)();
	using IsLoadoutValid = bool (*)(UniverseID defensibleid, const char* macroname, const char* loadoutid, uint32_t * numinvalidpatches);
	using IsLockbox = bool (*)(const UniverseID componentid);
	using IsMasterVersion = bool (*)(void);
	using IsMouseDoubleClickMode = bool (*)();
	using IsMouseEmulationActive = bool (*)(void);
	using IsNavBeacon = bool (*)(const UniverseID componentid);
	using IsNextStartAnimationSkipped = bool (*)(bool reset);
	using IsObjectKnown = bool (*)(const UniverseID componentid);
	using IsObjectKnown = bool (*)(const UniverseID componentid);
	using IsOrderSelectableFor = bool (*)(const char* orderdefid, UniverseID controllableid);
	using IsPerson = bool (*)(NPCSeed person, UniverseID controllableid);
	using IsPersonTransferScheduled = bool (*)(UniverseID controllableid, NPCSeed person);
	using IsPlayerBlacklistDefault = bool (*)(BlacklistID id, const char* listtype, const char* defaultgroup);
	using IsPlayerCameraTargetViewPossible = bool (*)(UniverseID targetid, bool force);
	using IsRealComponentClass = bool (*)(UniverseID componentid, const char* classname);
	using IsResourceProbe = bool (*)(const UniverseID componentid);
	using IsSatellite = bool (*)(const UniverseID componentid);
	using IsShiftPressed = bool (*)(void);
	using IsShip = bool (*)(const UniverseID componentid);
	using IsShipAtExternalDock = bool (*)(UniverseID shipid);
	using IsShipBeingRetrieved = bool (*)(UniverseID shipid);
	using IsSofttargetManagerActive = bool (*)();
	using IsSoftwareDefault = bool (*)(UniverseID controllableid, const char* macroname, const char* softwarename);
	using IsStartmenu = bool (*)();
	using IsStation = bool (*)(const UniverseID componentid);
	using IsStationary = bool (*)(const UniverseID componentid);
	using IsSurfaceElement = bool (*)(const UniverseID componentid);
	using IsTargetInPlayerWeaponRange = bool (*)(const UniverseID componentid);
	using IsTargetable = bool (*)(const uint32_t messageid);
	using IsTurretGroupArmed = bool (*)(UniverseID defensibleid, UniverseID contextid, const char* path, const char* group);
	using IsUnit = bool (*)(UniverseID controllableid);
	using IsUnitMacroCompatible = bool (*)(UniverseID containerid, const char* macroname, const char* unitmacroname);
	using IsUpgradeMacroCompatible = bool (*)(UniverseID defensibleid, UniverseID moduleid, const char* macroname, bool ismodule, const char* upgradetypename, size_t slot, const char* upgrademacroname);
	using IsUpgradeMacroCompatible = bool (*)(UniverseID objectid, UniverseID moduleid, const char* macroname, bool ismodule, const char* upgradetypename, size_t slot, const char* upgrademacroname);
	using IsVRMode = bool (*)();
	using IsVRMode = bool (*)();
	using IsVentureShip = bool (*)(const UniverseID componentid);
	using IsVirtualUpgradeMacroCompatible = bool (*)(UniverseID defensibleid, const char* macroname, const char* upgradetypename, size_t slot, const char* upgrademacroname);
	using IsWeaponArmed = bool (*)(UniverseID weaponid);
	using IsZone = bool (*)(const UniverseID componentid);
	using LaunchLaserTower = void (*)(UniverseID defensibleid, const char* lasertowermacroname);
	using LaunchMine = void (*)(UniverseID defensibleid, const char* minemacroname);
	using LaunchNavBeacon = void (*)(UniverseID defensibleid, const char* navbeaconmacroname);
	using LaunchResourceProbe = void (*)(UniverseID defensibleid, const char* resourceprobemacroname);
	using LaunchSatellite = void (*)(UniverseID defensibleid, const char* satellitemacroname);
	using MarkIndicatorShown = bool (*)(const UniverseID componentid);
	using MutePlayerAlert = void (*)(size_t index);
	using NotifyErrorLogDispatching = void (*)();
	using NotifyErrorLogDispatchingDone = void (*)();
	using OpenWebBrowser = void (*)(const char* url);
	using PayBuildPlotSize = void (*)(UniverseID stationid, Coord3D plotsize, Coord3D plotcenter);
	using QuickDock = bool (*)();
	using ReadAllInventoryWares = void (*)(void);
	using ReadInventoryWare = void (*)(const char* wareid);
	using ReadKnownItem = void (*)(const char* libraryid, const char* itemid, bool read);
	using ReassignPeople = void (*)(UniverseID controllableid, CrewTransferContainer * reassignedcrew, uint32_t amount);
	using ReenableErrorLog = void (*)();
	using ReleaseConstructionMapState = void (*)(void);
	using ReleaseOrderSyncPoint = void (*)(uint32_t syncid);
	using ReleasePersonFromCrewTransfer = void (*)(UniverseID controllableid, NPCSeed person);
	using RemoveAllOrders = bool (*)(UniverseID controllableid);
	using RemoveAttackerFromBoardingOperation = bool (*)(UniverseID defensibleboarderid);
	using RemoveBlacklist = void (*)(BlacklistID id);
	using RemoveBuildPlot = bool (*)(UniverseID stationid);
	using RemoveCommander2 = bool (*)(UniverseID controllableid);
	using RemoveDockingBayReservation = void (*)(UniverseID dockingbayid);
	using RemoveFill = void (*)(const UniverseID componentid, const char* const connectionname);
	using RemoveHoloMap = void (*)(void);
	using RemoveLoadout = bool (*)(const char* source, const char* macroname, const char* localid);
	using RemoveOrder = bool (*)(UniverseID controllableid, size_t idx, bool playercancelled, bool checkonly);
	using RemoveOrderSyncPointID = void (*)(UniverseID controllableid, size_t orderidx);
	using RemoveOutline = void (*)(const UniverseID componentid, const char* const connectionname);
	using RemovePerson = void (*)(UniverseID controllableid, NPCSeed person);
	using RemovePlannedDefaultOrder = void (*)(UniverseID controllableid);
	using RemovePlayerAlert = void (*)(size_t index);
	using RemoveReadMessages = void (*)(const char* categoryname);
	using RequestDockAt = bool (*)(UniverseID containerid, bool checkonly);
	using RequestShipFromInternalStorage2 = bool (*)(UniverseID shipid, bool highpriority, UniverseID refcomponentid);
	using ReserveBuildPlot = UniverseID(*)(UniverseID sectorid, const char* factionid, const char* set, UIPosRot location, float x, float y, float z);
	using ResetResponseToSignalForControllable = bool (*)(const char* signalid, UniverseID controllableid);
	using RevealEncyclopedia = void (*)(void);
	using RevealMap = void (*)(void);
	using RevealStations = void (*)(void);
	using SaveLoadout = void (*)(const char* macroname, UILoadout uiloadout, const char* source, const char* id, bool overwrite, const char* name, const char* desc);
	using SelectSimilarMapComponents = void (*)(UniverseID holomapid, UniverseID componentid);
	using SellPlayerShip = void (*)(UniverseID shipid, UniverseID shipyardid);
	using SetActiveMission = bool (*)(MissionID missionid);
	using SetAllMissileTurretModes = void (*)(UniverseID defensibleid, const char* mode);
	using SetAllMissileTurretsArmed = void (*)(UniverseID defensibleid, bool arm);
	using SetAllNonMissileTurretModes = void (*)(UniverseID defensibleid, const char* mode);
	using SetAllNonMissileTurretsArmed = void (*)(UniverseID defensibleid, bool arm);
	using SetAllTurretModes = void (*)(UniverseID defensibleid, const char* mode);
	using SetAllTurretsArmed = void (*)(UniverseID defensibleid, bool arm);
	using SetAllowedWeaponSystems = void (*)(UniverseID defensibleid, size_t orderidx, bool usedefault, WeaponSystemInfo * uiweaponsysteminfo, uint32_t numuiweaponsysteminfo);
	using SetAmmoOfWeapon = bool (*)(UniverseID weaponid, const char* newammomacro);
	using SetCheckBoxChecked2 = void (*)(const int checkboxid, bool checked, bool update);
	using SetCommander = bool (*)(UniverseID controllableid, UniverseID commanderid, const char* assignment);
	using SetConfigSetting = void (*)(const char* const setting, const bool value);
	using SetControllableBlacklist = void (*)(UniverseID controllableid, BlacklistID id, const char* listtype, bool value);
	using SetCrosshairMessage = void (*)(const uint32_t messageid);
	using SetCustomGameStartShipAndLoadoutProperty = void (*)(const char* id, const char* shippropertyid, const char* loadoutpropertyid, const char* macroname, UILoadout uiloadout);
	using SetDefaultResponseToSignalForControllable = bool (*)(const char* newresponse, bool ask, const char* signalid, UniverseID controllableid);
	using SetDefaultResponseToSignalForFaction = bool (*)(const char* newresponse, bool ask, const char* signalid, const char* factionid);
	using SetDefensibleActiveWeaponGroup = void (*)(UniverseID defensibleid, bool primary, uint32_t groupidx);
	using SetDefensibleLoadoutLevel = void (*)(UniverseID defensibleid, float value);
	using SetDockingBayReservation = void (*)(UniverseID dockingbayid, double duration);
	using SetDroneMode = void (*)(UniverseID defensibleid, const char* dronetype, const char* mode);
	using SetDroneTypeArmed = void (*)(UniverseID defensibleid, const char* dronetype, bool arm);
	using SetEditBoxText = void (*)(const int editboxid, const char* text);
	using SetEntityToPost = bool (*)(UniverseID controllableid, UniverseID entityid, const char* postid);
	using SetFill = void (*)(const UniverseID componentid, const char* const connectionname, const uint8_t red, const uint8_t green, const uint8_t blue, const float alpha, const bool animated, const float minalpha, const float maxalpha, const float transitiontime);
	using SetFleetName = void (*)(UniverseID controllableid, const char* fleetname);
	using SetFocusMapComponent = void (*)(UniverseID holomapid, UniverseID componentid, bool resetplayerpan);
	using SetFormationShape = UIFormationInfo(*)(UniverseID objectid, const char* formationshape);
	using SetGuidance = void (*)(UniverseID componentid, UIPosRot offset);
	using SetKnownRead = void (*)(UniverseID componentid, bool read);
	using SetMapAlertFilter = void (*)(UniverseID holomapid, uint32_t alertlevel);
	using SetMapFactionRelationColorOption = void (*)(UniverseID holomapid, bool value);
	using SetMapFilterString = void (*)(UniverseID holomapid, uint32_t numtexts, const char** textarray);
	using SetMapPaintMod = void (*)(UniverseID holomapid, const char* wareid);
	using SetMapPanOffset = void (*)(UniverseID holomapid, UniverseID offsetcomponentid);
	using SetMapPicking = void (*)(UniverseID holomapid, bool enable);
	using SetMapRelativeMousePosition = void (*)(UniverseID holomapid, bool valid, float x, float y);
	using SetMapRenderAllAllyOrderQueues = void (*)(UniverseID holomapid, bool value);
	using SetMapRenderAllOrderQueues = void (*)(UniverseID holomapid, bool value);
	using SetMapRenderCargoContents = void (*)(UniverseID holomapid, bool value);
	using SetMapRenderCivilianShips = void (*)(UniverseID holomapid, bool value);
	using SetMapRenderCrewInfo = void (*)(UniverseID holomapid, bool value);
	using SetMapRenderDockedShipInfos = void (*)(UniverseID holomapid, bool value);
	using SetMapRenderEclipticLines = void (*)(UniverseID holomapid, bool value);
	using SetMapRenderMissionGuidance = void (*)(UniverseID holomapid, MissionID missionid);
	using SetMapRenderMissionOffers = void (*)(UniverseID holomapid, bool value);
	using SetMapRenderResourceInfo = void (*)(UniverseID holomapid, bool value);
	using SetMapRenderSelectionLines = void (*)(UniverseID holomapid, bool value);
	using SetMapRenderTradeOffers = void (*)(UniverseID holomapid, bool value);
	using SetMapRenderWorkForceInfo = void (*)(UniverseID holomapid, bool value);
	using SetMapRenderWrecks = void (*)(UniverseID holomapid, bool value);
	using SetMapState = void (*)(UniverseID holomapid, HoloMapState state);
	using SetMapStationInfoBoxMargin = void (*)(UniverseID holomapid, const char* margin, uint32_t width);
	using SetMapTargetDistance = void (*)(UniverseID holomapid, float distance);
	using SetMapTopTradesCount = void (*)(UniverseID holomapid, uint32_t count);
	using SetMapTradeFilterByMaxPrice = void (*)(UniverseID holomapid, int64_t price);
	using SetMapTradeFilterByMinTotalVolume = void (*)(UniverseID holomapid, uint32_t minvolume);
	using SetMapTradeFilterByPlayerOffer = void (*)(UniverseID holomapid, bool buysellswitch, bool enable);
	using SetMapTradeFilterByWare = void (*)(UniverseID holomapid, const char** wareids, uint32_t numwareids);
	using SetMapTradeFilterByWareTransport = void (*)(UniverseID holomapid, const char** transporttypes, uint32_t numtransporttypes);
	using SetMessageRead = void (*)(MessageID messageid, const char* categoryname);
	using SetNotificationTypeEnabled = void (*)(const char* id, bool value);
	using SetOrderSyncPointID = bool (*)(UniverseID controllableid, size_t orderidx, uint32_t syncid, bool checkonly);
	using SetOutline = void (*)(const UniverseID componentid, const char* const connectionname, const uint8_t red, const uint8_t green, const uint8_t blue, const bool animated);
	using SetPlayerBlacklistDefault = void (*)(BlacklistID id, const char* listtype, const char* defaultgroup, bool value);
	using SetPlayerCameraCockpitView = void (*)(bool force);
	using SetPlayerCameraTargetView = void (*)(UniverseID targetid, bool force);
	using SetPlayerClothingTheme = void (*)(const char* theme);
	using SetPlayerFactionName = void (*)(const char* name);
	using SetPlayerGlobalLoadoutLevel = void (*)(float value);
	using SetPlayerIllegalWare = void (*)(const char* wareid, bool illegal);
	using SetPlayerLogo = void (*)(UILogo logo);
	using SetPlayerPaintTheme = void (*)(const char* theme);
	using SetSelectedMapComponent = void (*)(UniverseID holomapid, UniverseID componentid);
	using SetSelectedMapComponents = void (*)(UniverseID holomapid, UniverseID * componentids, uint32_t numcomponentids);
	using SetSelectedMapMacroSlot = void (*)(UniverseID holomapid, UniverseID defensibleid, UniverseID moduleid, const char* macroname, bool ismodule, const char* upgradetypename, size_t slot);
	using SetSofttarget = bool (*)(UniverseID componentid, const char* const connectionname);
	using SetSubordinateGroupAssignment = void (*)(UniverseID controllableid, int group, const char* assignment);
	using SetSubordinateGroupDockAtCommander = void (*)(UniverseID controllableid, int group, bool value);
	using SetTrackedMenuFullscreen = void (*)(const char* menu, bool fullscreen);
	using SetTurretGroupArmed = void (*)(UniverseID defensibleid, UniverseID contextid, const char* path, const char* group, bool arm);
	using SetTurretGroupMode2 = void (*)(UniverseID defensibleid, UniverseID contextid, const char* path, const char* group, const char* mode);
	using SetWeaponArmed = void (*)(UniverseID weaponid, bool arm);
	using SetWeaponGroup = void (*)(UniverseID defensibleid, UniverseID weaponid, bool primary, uint32_t groupidx, bool value);
	using SetWeaponMode = void (*)(UniverseID weaponid, const char* mode);
	using ShouldSubordinateGroupDockAtCommander = bool (*)(UniverseID controllableid, int group);
	using ShowBuildPlotPlacementMap = void (*)(UniverseID holomapid, UniverseID sectorid);
	using ShowInteractMenu = void (*)(const UniverseID componentid, const char* const connectionname, const uint32_t id);
	using ShowObjectConfigurationMap = void (*)(UniverseID holomapid, UniverseID defensibleid, UniverseID moduleid, const char* macroname, bool ismodule, UILoadout uiloadout);
	using ShowUniverseMap2 = void (*)(UniverseID holomapid, bool setoffset, bool showzone, bool forcebuildershipicons, UniverseID startsectorid, UIPosRot startpos);
	using SignalObjectWithNPCSeed = void (*)(UniverseID objecttosignalid, const char* param, NPCSeed person, UniverseID controllableid);
	using SpawnObjectAtPos = void (*)(const char* macroname, UniverseID sectorid, UIPosRot offset);
	using StartBoardingOperation = bool (*)(UniverseID defensibletargetid, const char* boarderfactionid);
	using StartBriefing = void (*)(MissionID missionid, const char* texturename, bool issubmission);
	using StartMapBoxSelect = void (*)(UniverseID holomapid, bool selectenemies);
	using StartPanMap = void (*)(UniverseID holomapid);
	using StartPlayerActivity = void (*)(const char* activityid);
	using StartResearch = void (*)(const char* wareid, UniverseID researchmoduleid);
	using StartRotateMap = void (*)(UniverseID holomapid);
	using StopBriefing = void (*)(MissionID missionid, bool issubmission);
	using StopMapBoxSelect = void (*)(UniverseID holomapid);
	using StopPanMap = bool (*)(UniverseID holomapid);
	using StopPlayerActivity = void (*)(const char* activityid);
	using StopRotateMap = bool (*)(UniverseID holomapid);
	using TakeShipFromInternalStorage = bool (*)(UniverseID shipid, bool highpriority, bool checkonly);
	using TeleportPlayerTo = bool (*)(UniverseID controllableid, bool allowcontrolling, bool instant, bool force);
	using ToggleAutoPilot = bool (*)(bool checkonly);
	using ToggleFlightAssist = void (*)();
	using TransportPlayerToTarget = void (*)(UIComponentSlot target);
	using UndockPlayerShip = const char* (*)(bool checkonly);
	using UnmutePlayerAlert = void (*)(size_t index, bool silent);
	using UpdateAttackerOfBoardingOperation = bool (*)(UniverseID defensibletargetid, UniverseID defensibleboarderid, const char* boarderfactionid, const char* actionid, uint32_t * marinetieramounts, int32_t * marinetierskilllevels, uint32_t nummarinetiers);
	using UpdateBlacklist = void (*)(BlacklistInfo info);
	using UpdateBoardingOperation = bool (*)(UniverseID defensibletargetid, const char* boarderfactionid, uint32_t approachthreshold, uint32_t insertionthreshold);
	using UpdateMapBuildPlot = void (*)(UniverseID holomapid);
	using UpdateObjectConfigurationMap = void (*)(UniverseID holomapid, UniverseID defensibleid, UniverseID moduleid, const char* macroname, bool ismodule, UILoadout uiloadout);
	using UpdatePlayerAlert = void (*)(PlayerAlertInfo uialert);
	using UpdateProduction = void (*)(UniverseID containerormoduleid, bool force);
	using ZoomMap = void (*)(UniverseID holomapid, float zoomstep);
	
	// TODO: Add remaining funcs (and put a regex in the comments for easy replacement...)
	// func regex: ^(\s)(const char\*|.*?)\s(.*?)\((.*)
	// replacer: $1using $3 = $2 (*)($4
	
}
